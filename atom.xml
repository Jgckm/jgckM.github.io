<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JgckM&#39;s 踩坑日常</title>
  
  <subtitle>外界避风港</subtitle>
  <link href="https://jgckm.github.io/atom.xml" rel="self"/>
  
  <link href="https://jgckm.github.io/"/>
  <updated>2024-04-14T04:54:41.792Z</updated>
  <id>https://jgckm.github.io/</id>
  
  <author>
    <name>JgckM</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>科目一知识点总结</title>
    <link href="https://jgckm.github.io/posts/35bc9194.html"/>
    <id>https://jgckm.github.io/posts/35bc9194.html</id>
    <published>2023-11-14T08:44:21.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="科目一小技巧总给"><a href="#科目一小技巧总给" class="headerlink" title="科目一小技巧总给"></a>科目一小技巧总给</h2><h1 id="一些辅助记忆的小技巧"><a href="#一些辅助记忆的小技巧" class="headerlink" title="一些辅助记忆的小技巧"></a>一些辅助记忆的小技巧</h1><ol><li>假一吊二撤三醉五逃终身；**(驾驶证申请所需时限)**</li><li>转弯过桥上窄道泥路&#x2F;路口&#x2F;人多不好走的路均不能超过<code>30km/h</code>；</li><li>左右观察左超车；**(具备超车条件才能超车)**</li><li>交叉转弯窄路隧道桥梁坡道铁路口<code>50米</code>不能停车,公交站&#x2F;加油站&#x2F;消防局附近 30 米不得停车；**(口 5 站 3)**</li><li>驾驶证到期<code>90天</code>，变更<code>30天</code>内换。</li><li>转弯的机动车让直行的车辆先行，右方道路来车先行，右转弯车让左转弯车先行:<strong>(交叉路口会车原则: 直行&gt; 转弯, 右边直行 &gt; 左边直行,左转弯 &gt; 右转弯 )</strong></li><li>驾驶证的有效期为<code>6</code>年，没有扣分记录的第二次换证的为<code>10</code>年。**(六,十,长期)**</li><li>机动车没有违规行为，只有违法行为。**(交通道路安全法)**</li><li>交警手势大于交通信号灯。**(信号灯 🚥 也是人造的,人 &gt; 灯)**</li><li>高速路同向有 2 条车道，右道的速度范围为 60-100km&#x2F;h，左道的速度范 100-120km&#x2F;h。如同方向有 3 条车道，右道的速度范围为 60-90km&#x2F;h，中间的 90-110km&#x2F;h，左道 110-120km&#x2F;h。**(高速车道最低时速划分 两车道: 100km&#x2F;h 60km&#x2F;h 三车道: 110km&#x2F;h 90km&#x2F;h 60km&#x2F;h 四车道: 110km&#x2F;h 90km&#x2F;h 90km&#x2F;h 60km&#x2F;h )**</li><li>有嫌疑的或未放置检验合格标志，未悬挂机动车号牌，未放置保险标志的，未携带机动车行驶证的都是可依法扣留车辆的。**(是车不安全,所以是扣留车辆)**</li><li>驾驶证遗失、损毁无法辨认时核发地车辆管理所申请补发。</li><li>车速超过每小时<code>100km/h</code>，应当与同车道前车保持<code>100米以上</code>的距离，低于<code>100</code>的，<code>不少于50米</code>。**(安全距离)**</li><li>续驾驶机动车超过<code>4</code>小时应停车休息，停车休息时间不少于<code>20</code>分钟。**(谨防疲劳驾驶,每 4 小时休息 20 分钟)**</li><li>造成事故致人重伤但<code>没死</code>的处<code>3年以下</code>，造成事故<code>致死</code>的处<code>3-7年</code>，造成事故<code>逃逸后致死</code>的处罚<code>7-15</code>年 <strong>(事故量刑标准)</strong></li><li>小型汽车（<code>C1</code>）准驾车型：小型、微型载客汽车以及轻型、微型载货汽车；轻型、微型专项作业车，小型、微型自动挡载客汽车以及轻型、微型自动挡载货汽车，低速载货汽车，三轮汽车。**(除了 A2 外只要持有大于准驾驶车型驾照的都可以驾驶)**</li><li>交通信号包括交通信号灯、交通标志、交通标线和交通警察的指挥。</li><li>在狭窄的坡路，上坡的一方先行；但下坡的一方已行至中途而上坡的一方未上坡时，下坡的一方先行。</li><li>用伪造、变造机动车号牌、行驶证、驾驶证或者使用其他机动车号牌、行驶证的，一次扣 12 分。**(弄虚作假上路是很危险的)**</li><li>在行驶中被查获有吸毒注射毒品，在戒毒还没有成功的，注销驾驶证。**(自己都控制不住,又怎么控制车)**</li><li>被查三年内又重新吸毒，注射毒品者或戒毒未满三年，又吸毒成瘾者，不得申请驾驶证。**(有病就得根治)**</li><li>只有在没有路灯或者没有照明的情况下才能用远光灯,150 米以外无来车或者前车的情况。</li><li>200 米能见度，最高速 60，车距 100；100 米能见度，最高车速 40，车距 50，能见度 50 米，车速 20，尽快离开高速路。**(速记: 261 145 520)**</li><li>无证驾驶就是你全责，属于犯法行为。</li><li>不能超车的有对面来回车的，在执行紧急任务的警车、消防车、救护车、工程救险车的，道口、交叉路口、窄桥、弯道、陡坡、隧道、人行横道、市区交通流量大的路段。</li><li>机动车驾驶人因服兵役、出国（境）等原因，无法在规定时间内办理驾驶证期满换证，延期期限最长不超过<code>三</code>年。</li><li>超过<code>70</code>岁就需要每年提交一次身体检查证明。</li><li>扣<code>6</code>分情况有，闯红灯，不避让校车，占用应急车道，驾驶证被扣后继续驾驶的。</li><li>红圈白底黑字为最高速度，蓝底白字为最低速度。**(警示牌:红高蓝低黄建议 路面:黄高白低黑建议 )**</li><li>无论在哪里居住都可以向当地的车管所申请换证。</li><li>有道路中心线的道路，城市道路为 30km&#x2F;h，公路为 40km&#x2F;h；同方向只有 1 条机动车道的道路，城市道路为 50km&#x2F;h，公路为 70km&#x2F;h。</li><li>违反交规，不仅要罚钱，还要扣分。**(扣分本身就是罚钱,扣分不会自动消除,需要缴纳罚款,可能还需要接受教育和考试)**</li><li>在高速公路上发生故障时，警告标志应当设置在故障车来车方向<code>150米以外</code>，车上人员应当迅速转移到右侧路肩上或者应急车道内，并且迅速报警。</li><li>小型自动挡汽车（<code>C2</code>）准驾车型：小型、微型自动挡载客汽车以及轻型、微型自动挡载货汽车。</li><li>在夜晚路过没有路灯和信号灯的路口，应该交替使用远近光灯，提示周围的车辆，以免发生事故。</li><li>对驾驶<code>拼装</code>的机动车上道路行驶的驾驶人，处<code>200元以上2000元以下</code>罚款，并吊销驾驶证。</li><li>申请小型汽车、小型自动挡汽车、残疾人专用小型自动挡载客汽车、轻便摩托车准驾车型的，在<code>18周岁以上，70周岁以下</code>。</li><li>能见度低，要开启前照灯、示廓灯和后位灯防止出现事故。</li><li>看清交警手势，手臂平直，接着他手臂轻轻压低或摆动，这是变道。手臂降低到腰部摆动，那是转弯。</li><li>驾驶准考证明有效期为<code>3</code>年。</li><li>凡是车辆进入<code>双向行驶隧道</code>,一般都应该开启<code>近光灯</code>,而不要开启<code>远光灯</code>。若是隧道本身没有灯光的,可以变换灯光行驶,但是<code>会车前要转为近光灯</code>。</li><li>转向灯操作，上右下左，跟时针一样，顺时针为右转，既往上打，逆时针为左转，既往下打。</li><li>从匝道进入高速公路加速车道，在<code>加速车道里</code>迅速将车速提高到每小时 60 公里以上。</li><li>ABS 技术的出现，就是大大地<code>降低了侧滑</code>，和原地掉头的现象，保证了行驶的安全。如果，你在使用带 ABS 的车辆，在刹车时的动作，类似不带 ABS 的车这样<code>轻轻的踩下去</code>，很可能会<code>不能触发</code>ABS 系统，也就起不到 ABS 的作用了，所以，一般就是要求，<code>刹车动作要果断，一脚就踩到底</code>，保证 ABS 的正确执行。</li><li>驾驶人在道路上驾驶机动车<code>追逐竞驶</code>，情节恶劣的处<code>3年以下</code>有期徒刑。</li><li>准驾车型驾驶证的驾驶人，发生交通事故造成人员死亡承担同等以上责任未被吊销机动车驾驶证的，应当在本记分周期结束后<code>三十日内</code>到公安机关交通管理部门接受审验。</li><li>进入<code>高速入口</code>需要提前打开<code>左转向灯</code>,提示高速后方直行来车,<code>驶离</code>高速开<code>右转向灯</code>, 进入环岛无需开转向灯,<code>驶离</code>环岛<code>需开右转向灯</code></li><li>虚线才能变更车道,需提前开启转向灯,高速公路错过变更车道的只能直行到下一个出口</li><li>判断是否酒驾还是醉驾,血液中酒精含量 <code>≥ 20毫克/100ml</code>为酒驾, <code>≥ 80毫克/100ml</code>为醉驾</li><li>普通道路逆行扣<code>3</code>分,高速扣<code>12</code>分</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;科目一小技巧总给&quot;&gt;&lt;a href=&quot;#科目一小技巧总给&quot; class=&quot;headerlink&quot; title=&quot;科目一小技巧总给&quot;&gt;&lt;/a&gt;科目一小技巧总给&lt;/h2&gt;&lt;h1 id=&quot;一些辅助记忆的小技巧&quot;&gt;&lt;a href=&quot;#一些辅助记忆的小技巧&quot; class=&quot;</summary>
      
    
    
    
    <category term="驾考" scheme="https://jgckm.github.io/categories/%E9%A9%BE%E8%80%83/"/>
    
    
    <category term="科目一" scheme="https://jgckm.github.io/tags/%E7%A7%91%E7%9B%AE%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>去除桌面小箭头</title>
    <link href="https://jgckm.github.io/posts/af260385.html"/>
    <id>https://jgckm.github.io/posts/af260385.html</id>
    <published>2023-11-10T15:42:44.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<p>去除小箭头</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons&quot; /v <span class="number">29</span> /d &quot;<span class="variable">%systemroot%</span>\system32\imageres.dll,<span class="number">197</span>&quot; /t reg_sz /f</span><br><span class="line"><span class="built_in">taskkill</span> /f /im explorer.exe</span><br><span class="line"><span class="built_in">attrib</span> -s -r -h &quot;<span class="variable">%userprofile%</span>\AppData\Local\iconcache.db&quot;</span><br><span class="line"><span class="built_in">del</span> &quot;<span class="variable">%userprofile%</span>\AppData\Local\iconcache.db&quot; /f /q</span><br><span class="line"><span class="built_in">start</span> explorer</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>恢复箭头</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg delete &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons&quot; /v <span class="number">29</span> /f</span><br><span class="line"><span class="built_in">taskkill</span> /f /im explorer.exe</span><br><span class="line"><span class="built_in">attrib</span> -s -r -h &quot;<span class="variable">%userprofile%</span>\AppData\Local\iconcache.db&quot;</span><br><span class="line"><span class="built_in">del</span> &quot;<span class="variable">%userprofile%</span>\AppData\Local\iconcache.db&quot; /f /q</span><br><span class="line"><span class="built_in">start</span> explorer</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;去除小箭头&lt;/p&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="Windows" scheme="https://jgckm.github.io/categories/Windows/"/>
    
    
    <category term="Windows" scheme="https://jgckm.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>B站批量删除订阅番剧</title>
    <link href="https://jgckm.github.io/posts/e2167196.html"/>
    <id>https://jgckm.github.io/posts/e2167196.html</id>
    <published>2023-10-03T13:02:27.000Z</published>
    <updated>2024-04-14T04:54:41.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="批量删除订阅番剧"><a href="#批量删除订阅番剧" class="headerlink" title="批量删除订阅番剧"></a>批量删除订阅番剧</h2><p>注意这个方法是删除<strong>所有订阅的番剧</strong>（慎重删除！！！）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">cl</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#page-bangumi &gt; div &gt; div.section.bangumi &gt; div &gt; div &gt; ul &gt; li:nth-child(1) &gt; div &gt; ul &gt; li:nth-child(4)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e) &#123;</span><br><span class="line">        e.<span class="title function_">click</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setTimeout</span>(cl, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;批量删除订阅番剧&quot;&gt;&lt;a href=&quot;#批量删除订阅番剧&quot; class=&quot;headerlink&quot; title=&quot;批量删除订阅番剧&quot;&gt;&lt;/a&gt;批量删除订阅番剧&lt;/h2&gt;&lt;p&gt;注意这个方法是删除&lt;strong&gt;所有订阅的番剧&lt;/strong&gt;（慎重删除！！！）&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MTKClient连接OPPO-A91</title>
    <link href="https://jgckm.github.io/posts/bc8787a6.html"/>
    <id>https://jgckm.github.io/posts/bc8787a6.html</id>
    <published>2023-07-04T01:35:02.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>你需要 Python 工作环境并且设置好环境变量</p><h3 id="Bypass-utility"><a href="#Bypass-utility" class="headerlink" title="Bypass utility"></a>Bypass utility</h3><p>把 <a href="https://github.com/MTK-bypass/bypass_utility">Bypass utility</a> 这个项目克隆到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/MTK-bypass/bypass_utility.git</span><br></pre></td></tr></table></figure><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyusb json5</span><br></pre></td></tr></table></figure><h3 id="Payloads"><a href="#Payloads" class="headerlink" title="Payloads"></a>Payloads</h3><p>将 <a href="https://github.com/MTK-bypass/exploits_collection">exploits_collection</a> 克隆到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/MTK-bypass/exploits_collection.git</span><br></pre></td></tr></table></figure><h3 id="UsbDk"><a href="#UsbDk" class="headerlink" title="UsbDk"></a>UsbDk</h3><p>安装<a href="https://github.com/daynix/UsbDk/releases">UsbDk (64-bit)</a> 我电脑是64位的（要根据你自己电脑位数）</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>将 exploits_collection 项目里面的 <code>payloads</code> 文件夹 和 <code>default_config.json5</code> 文件复制到 bypass_utility 根目录下 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bypass_utility</span><br><span class="line">│  .gitignore</span><br><span class="line">│  default_config.json5 </span><br><span class="line">│  libusb-1.0.dll</span><br><span class="line">│  LICENSE</span><br><span class="line">│  main.py</span><br><span class="line">│  README.md</span><br><span class="line">│  </span><br><span class="line">├─payloads</span><br><span class="line">│   │....很多文件</span><br><span class="line">│      </span><br><span class="line">└─src</span><br><span class="line">   │  ....很多文件</span><br></pre></td></tr></table></figure><p>再修改 Bypass utility 的 <code>main.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CONFIG = &quot;default_config.json5&quot;</span><br><span class="line">PAYLOAD_DIR = &quot;payloads/&quot;</span><br><span class="line">DEFAULT_PAYLOAD = &quot;mt6771_payload.bin&quot; // 这里要根据你的SOC来设置，请综合 default_config.json5 找到你的SOC填写对应填写</span><br><span class="line">DEFAULT_DA_ADDRESS = 0x200D00</span><br></pre></td></tr></table></figure><p>修改好之后，手机关机，运行<code>main.py</code> 同时按住 音量键+ 和 音量- 等待 1~2秒连接电脑</p><p>如果程序没有报错，像这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[2023-07-04 10:13:14.264616] Waiting for device</span><br><span class="line">[2023-07-04 10:13:52.960004] Found device = 0e8d:0003</span><br><span class="line"></span><br><span class="line">[2023-07-04 10:13:53.397352] Device hw code: 0x788</span><br><span class="line">[2023-07-04 10:13:53.402365] Device hw sub code: 0x8a00</span><br><span class="line">[2023-07-04 10:13:53.402365] Device hw version: 0xca00</span><br><span class="line">[2023-07-04 10:13:53.403721] Device sw version: 0x0</span><br><span class="line">[2023-07-04 10:13:53.403721] Device secure boot: True</span><br><span class="line">[2023-07-04 10:13:53.403721] Device serial link authorization: False</span><br><span class="line">[2023-07-04 10:13:53.404720] Device download agent authorization: True</span><br><span class="line"></span><br><span class="line">[2023-07-04 10:13:53.404720] Disabling watchdog timer</span><br><span class="line">[2023-07-04 10:13:53.407718] Disabling protection</span><br><span class="line">[2023-07-04 10:13:53.446036] Protection disabled</span><br></pre></td></tr></table></figure><p>运行完直接退出了，那就是成功了，现在使用 <a href="https://github.com/bkerler/mtkclient">MTKClient</a> 就可以直接连接了</p><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>如果 MTKClient 显示握手失败，请长按三件（音量+-）直到手机振动，即可重启</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Pytho</summary>
      
    
    
    
    <category term="玩机" scheme="https://jgckm.github.io/categories/%E7%8E%A9%E6%9C%BA/"/>
    
    
    <category term="玩机" scheme="https://jgckm.github.io/tags/%E7%8E%A9%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python虚拟管理工具</title>
    <link href="https://jgckm.github.io/posts/824ac3d0.html"/>
    <id>https://jgckm.github.io/posts/824ac3d0.html</id>
    <published>2023-07-04T01:16:41.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在使用Python的虚拟环境的时候感觉很繁琐，在网上找到一个好用的管理工具非常好用 <code>pipnenv</code></p><p><strong>pipenv 是Kenneth Reitz大神的作品，提供Python的各个版本间的管理，各种包管理。个人觉得是virtualenv pip等工具的合体。</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接使用 pip 安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>为啥要设置？</p><p>因为不设置环境变量，虚拟环境默认安装在C盘（你要是C盘战士可以跳过），还有就是设置完环境变量虚拟环境就可以在工作目录下了，方便管理</p><p>修改系统变量</p><table><thead><tr><th>变量名</th><th>变量值</th></tr></thead><tbody><tr><td>PIPENV_VENV_IN_PROJECT</td><td>1</td></tr></tbody></table><p>设置完成，在使用pipenv 测试一下</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>进入一个文件夹下 <strong>初始化虚拟环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pipenv install #初始化</span><br><span class="line">pipenv install --python 3.6 #指定版本</span><br><span class="line">pipenv install 包名 #（安装第三方依赖包）</span><br><span class="line"></span><br><span class="line">pipenv shell #进入虚拟环境。使用exit()可退出虚拟环境</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我在使用Python的虚拟环境的时候感觉很繁琐，在网上找到一个好用的管理工具非常好用 &lt;code&gt;pipnenv&lt;/code&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Python" scheme="https://jgckm.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://jgckm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用Python切割图片</title>
    <link href="https://jgckm.github.io/posts/b5cd49e7.html"/>
    <id>https://jgckm.github.io/posts/b5cd49e7.html</id>
    <published>2023-07-03T09:29:32.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>突发奇想，记录一下</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在使用之前确保安装了 Pillow</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>在这个示例中，我们将使用 Python 编写一个脚本，用于批量切割文件夹中的图片。每个图片都将被分割成 15 个小图片，按照从左到右、从上到下的顺序排列。切割出的小图片将被保存到单独的文件夹中，并且原图也会被保留。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-导入所需库"><a href="#1-导入所需库" class="headerlink" title="1. 导入所需库"></a>1. 导入所需库</h3><p>我们将使用<code>os</code>模块来处理文件和文件夹操作，以及<code>PIL</code>库（Python Imaging Library）来处理图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure><h3 id="2-定义图片切割函数"><a href="#2-定义图片切割函数" class="headerlink" title="2. 定义图片切割函数"></a>2. 定义图片切割函数</h3><p>我们需要定义一个函数，用于将单个图片切割成小图片并保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">split_image</span>(<span class="params">image_path, output_dir</span>):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    width, height = image.size</span><br><span class="line">    tile_size = <span class="number">420</span> // <span class="number">3</span>  <span class="comment"># 每个小图片的边长</span></span><br><span class="line"></span><br><span class="line">    count = <span class="number">1</span>  <span class="comment"># 计数器，用于给分割出的小图片进行重命名</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, height, tile_size):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, width, tile_size):</span><br><span class="line">            box = (x, y, x + tile_size, y + tile_size)</span><br><span class="line">            tile = image.crop(box)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建输出文件夹</span></span><br><span class="line">            os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保存分割出的小图片</span></span><br><span class="line">            tile_path = os.path.join(output_dir, <span class="string">f&quot;<span class="subst">&#123;count&#125;</span>.<span class="subst">&#123;image.<span class="built_in">format</span>.lower()&#125;</span>&quot;</span>)</span><br><span class="line">            tile.save(tile_path)</span><br><span class="line"></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存原图</span></span><br><span class="line">    original_path = os.path.join(output_dir, <span class="string">f&quot;original.<span class="subst">&#123;image.<span class="built_in">format</span>.lower()&#125;</span>&quot;</span>)</span><br><span class="line">    image.save(original_path)</span><br></pre></td></tr></table></figure><h3 id="3-编写主函数"><a href="#3-编写主函数" class="headerlink" title="3. 编写主函数"></a>3. 编写主函数</h3><p>我们需要编写一个主函数来遍历输入文件夹中的每个图片，并调用切割函数进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    input_dir = <span class="string">&quot;path/to/input/folder&quot;</span>  <span class="comment"># 输入文件夹路径</span></span><br><span class="line">    output_base_dir = <span class="string">&quot;path/to/output/folder&quot;</span>  <span class="comment"># 输出文件夹的基础路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历输入文件夹中的图片</span></span><br><span class="line">    <span class="keyword">for</span> i, filename <span class="keyword">in</span> <span class="built_in">enumerate</span>(os.listdir(input_dir)):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith((<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span>)):</span><br><span class="line">            image_path = os.path.join(input_dir, filename)</span><br><span class="line">            output_dir = os.path.join(output_base_dir, <span class="string">f&quot;pic<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            split_image(image_path, output_dir)</span><br></pre></td></tr></table></figure><h3 id="4-执行主函数"><a href="#4-执行主函数" class="headerlink" title="4. 执行主函数"></a>4. 执行主函数</h3><p>在脚本的末尾，我们需要添加以下代码来执行主函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>在使用这个脚本时，需要将<code>&quot;path/to/input/folder&quot;</code>替换为包含要切割图片的文件夹的实际路径，将<code>&quot;path/to/output/folder&quot;</code>替换为你想要保存输出文件夹的实际路径。</p><p>脚本将遍历输入文件夹中的每个图片，将每个图片切割为 15 个小图片，并将它们保存在以<code>pic1</code>、<code>pic2</code>等命名的文件夹中。同时，原图也会被保存在相应的输出文件夹中，并以<code>original.jpg</code>、<code>original.png</code>等命名。</p><p>请确保你的环境中已安装所需的库，可以通过运行<code>pip install pillow</code>来安装 Pillow 库。</p><p>以上就是批量切割文件夹中图片的 Python 脚本的编写过程。</p><blockquote><p>记得将<code>&quot;path/to/input/folder&quot;</code>和<code>&quot;path/to/output/folder&quot;</code>替换为实际的文件夹路径。</p></blockquote><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_image</span>(<span class="params">image_path, output_dir</span>):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    width, height = image.size</span><br><span class="line">    tile_size = <span class="number">420</span> // <span class="number">4</span>  <span class="comment"># 每个小图片的边长</span></span><br><span class="line"></span><br><span class="line">    count = <span class="number">1</span>  <span class="comment"># 计数器，用于给分割出的小图片进行重命名</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, height, tile_size):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, width, tile_size):</span><br><span class="line">            box = (x, y, x + tile_size, y + tile_size)</span><br><span class="line">            tile = image.crop(box)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建输出文件夹</span></span><br><span class="line">            os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保存分割出的小图片</span></span><br><span class="line">            tile_path = os.path.join(output_dir, <span class="string">f&quot;<span class="subst">&#123;count&#125;</span>.<span class="subst">&#123;image.<span class="built_in">format</span>.lower()&#125;</span>&quot;</span>)</span><br><span class="line">            tile.save(tile_path)</span><br><span class="line"></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存原图</span></span><br><span class="line">    original_path = os.path.join(output_dir, <span class="string">f&quot;all.<span class="subst">&#123;image.<span class="built_in">format</span>.lower()&#125;</span>&quot;</span>)</span><br><span class="line">    image.save(original_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    input_dir = <span class="string">&quot;input_folder&quot;</span>  <span class="comment"># 输入文件夹路径</span></span><br><span class="line">    output_base_dir = <span class="string">&quot;output_folder&quot;</span>  <span class="comment"># 输出文件夹的基础路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历输入文件夹中的图片</span></span><br><span class="line">    <span class="keyword">for</span> i, filename <span class="keyword">in</span> <span class="built_in">enumerate</span>(os.listdir(input_dir)):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith((<span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span>)):</span><br><span class="line">            image_path = os.path.join(input_dir, filename)</span><br><span class="line">            output_dir = os.path.join(output_base_dir, <span class="string">f&quot;pic<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            split_image(image_path, output_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;突发奇想，记录一下&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;</summary>
      
    
    
    
    <category term="Python" scheme="https://jgckm.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://jgckm.github.io/tags/Python/"/>
    
    <category term="Pillow" scheme="https://jgckm.github.io/tags/Pillow/"/>
    
    <category term="切割图片" scheme="https://jgckm.github.io/tags/%E5%88%87%E5%89%B2%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text3简单配置</title>
    <link href="https://jgckm.github.io/posts/68dc216d.html"/>
    <id>https://jgckm.github.io/posts/68dc216d.html</id>
    <published>2023-02-16T12:36:08.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为 notepad++ 反华事件，我也决定放弃使用 notepad++ ，现在转到了 Sublime Test 3 这个编辑器颜值可以说不输 vscode，打开速度也是甩 vscode 几条街，而且还支持插件。</p><p>但是我比较喜欢干净的，sublime 每次打开都打开之前的文件，很是烦人，找了好久才找到配置项，特此记录。</p><h2 id="关闭上次打开的文件"><a href="#关闭上次打开的文件" class="headerlink" title="关闭上次打开的文件"></a>关闭上次打开的文件</h2><blockquote><p>打开时经常打开上一次打开过的文件，很烦人。</p></blockquote><p>打开 SublimeText3 找到 <code>首选项</code> -&gt; <code>设置</code> 一次点击</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202302162045084.png" alt="`首选项` -&gt; `设置`"></p><p>添加一下代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;hot_exit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;remember_open_files&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202302162050084.png" alt="添加代码"></p><h2 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h2><p><strong>Shift+Ctrl+P</strong> 会弹出一个搜索框，在搜索框中输入关键字 <strong>install</strong> ,出现下拉选项，点击选择其中的：<strong>Package Control: Install Package</strong>,如图：</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202302162055392.png" alt="点击Package Control: Install Package"></p><p>点击 <strong>Package Control: Install Package</strong>，需要等待一会，他会再次弹出搜索框</p><p>安装完成会弹出成功窗口</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202302162104613.png" alt="弹出安装成功"></p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202302162057999.png" alt="弹出搜索框"></p><p>如果没弹出搜索框，在 <strong>Shift+Ctrl+P</strong> 输入 <strong>install</strong> 等一会就会出来了。</p><p>之后就是在搜索框里输入<strong>Chinese</strong>，选择下拉框中的<strong>ChineseLocalizations</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202302162104748.png" alt="选择下拉框中的**ChineseLocalizations**"></p><p>点击之后，稍等一会就可以看到界面已经边成了中文界面了，如果没有变成中文，就重启编辑器，在<strong>任务栏中的 Help-&gt;最下面的 Language-&gt;简体中文</strong></p><h2 id="禁用更新"><a href="#禁用更新" class="headerlink" title="禁用更新"></a>禁用更新</h2><p>找到 <code>首选项</code> -&gt; <code>设置</code> 一次点击，添加以下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;update_check&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><ol><li><p>修改 hosts 文件，需要有系统管理员权限才可以修改。windows 的 hosts 在 C:\Windows\System32\drivers\etc 目录下，其他系统请自行百度 hosts 所在目录。</p></li><li><p>用文本编辑器打开（记事本即可），在最后添加上如下信息。</p></li><li></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 license.sublimehq.com</span><br><span class="line">127.0.0.1 45.55.255.55</span><br><span class="line">127.0.0.1 45.55.41.223</span><br></pre></td></tr></table></figure><ol start="4"><li>打开 <code>帮助</code> -&gt; <code>输入注册码</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">—– BEGIN LICENSE —–</span><br><span class="line">Die Socialisten GmbH</span><br><span class="line">10 User License</span><br><span class="line">EA7E-800613</span><br><span class="line">51311422 E45F49ED 3F0ADE0C E5B8A508</span><br><span class="line">2F4D9B65 64E1E244 EDA11F0E F9D06110</span><br><span class="line">B7B2E826 E6FDAA72 2C653693 5D80582F</span><br><span class="line">09DCFFB5 113A940C 5045C0CD 5F8332F8</span><br><span class="line">34356CC6 D96F6FDB 4DEC20EA 0A24D83A</span><br><span class="line">2C82C329 E3290B29 A16109A7 EC198EB9</span><br><span class="line">F28EBB17 9C07403F D44BA75A C23C6874</span><br><span class="line">EBF11238 5546C3DD 737DC616 445C2941</span><br><span class="line">—— END LICENSE ——</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;因为 notepad++ 反华事件，我也决定放弃使用 notepad++ ，现在转到了 Sublime Test 3 这个编辑器颜值可以说不</summary>
      
    
    
    
    <category term="Notepad" scheme="https://jgckm.github.io/categories/Notepad/"/>
    
    
    <category term="SublimeText3" scheme="https://jgckm.github.io/tags/SublimeText3/"/>
    
  </entry>
  
  <entry>
    <title>Git设置代理</title>
    <link href="https://jgckm.github.io/posts/439c4b80.html"/>
    <id>https://jgckm.github.io/posts/439c4b80.html</id>
    <published>2023-01-29T13:07:17.000Z</published>
    <updated>2024-04-14T04:54:41.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Git相信大家是经常使用的东西了, 通过他来管理我们写的代码, 但是最近我同步代码时总是失败,    <code>git clone</code>的时候很慢有时候就会超时</p><p>于是就在 Google 的帮助下找到了解决办法特此记录一下, Git需要设置代理, 才能正常访问  Github 等网站 </p><h2 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h2><ul><li>Clash For Windwos</li><li>Git</li></ul><h2 id="Git设置代理"><a href="#Git设置代理" class="headerlink" title="Git设置代理"></a>Git设置代理</h2><p>在 Clash 中设置固定的端口, 并且关闭随机端口</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202301292124960.png" alt="关闭随机端口"></p><h3 id="全局代理"><a href="#全局代理" class="headerlink" title="全局代理"></a>全局代理</h3><p>打开 Git 在终端输入一下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy https://127.0.0.1:7890</span><br><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:7890&#x27;</span> </span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:7890&#x27;</span></span><br></pre></td></tr></table></figure><p>根据自己的代理类型来设置</p><p><strong>注意</strong>： <code>--glboal</code> 选项指的是修改 Git 的全局配置文件 <code>~/.gitconfig</code>，而非各个 Git 仓库里的配置文件 <code>.git/config</code>。<code>protocol</code> 指的是代理的协议，如 http，https，socks5 等。<code>port</code> 则为端口号(我这里是7890)。</p><h3 id="针对特定域名代理"><a href="#针对特定域名代理" class="headerlink" title="针对特定域名代理"></a>针对特定域名代理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.url.proxy protocol://127.0.0.1:port</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>此处的 <code>url</code> 即为你需要走代理的仓库域名，<code>url</code> 以 <code>http://</code> 和 <code>https://</code> 打头的<strong>均用</strong>这个方法。</li><li>网上很多中文教程，可能会告诉你 <code>https://</code> 打头的 <code>url</code> 使用“<code>git config --global https.https://example.com.proxy protocol://127.0.0.1:port</code>”，这种做法其实是错的！<strong>记住一点</strong>：Git 不认 <em><code>https.proxy</code></em> ，设置 <em>http.proxy</em> 就可以支持 https 了。</li><li>如果想了解 <code>url</code> 的更多模式，如子域名等的情况，可参照 <a href="https://git-scm.com/docs/git-config">Git 的官方文档</a> 。网页内容搜索 <code>http.&lt;url&gt;.*</code>，即可找到相关信息。</li></ul><h3 id="SSH-协议代理设置"><a href="#SSH-协议代理设置" class="headerlink" title="SSH 协议代理设置"></a>SSH 协议代理设置</h3><p><code>修改 SSH 配置文件 ~/.ssh/config</code>  没有的可以新建一个</p><p><code>Windows</code> SSH配置文件路径：<code>C:\Users\你的用户名\.ssh\config</code></p><p><code>Linux</code> SSH配置文件路径：<code>/home/你的用户名/.ssh/config</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局</span></span><br><span class="line"><span class="comment"># ProxyCommand connect -S 127.0.0.1:1080 %h %p</span></span><br><span class="line"><span class="comment"># 只为特定域名设定</span></span><br><span class="line">Host github.com gitlab.com</span><br><span class="line">ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure><p><code>-S</code> 代表走<code>socks</code>代理。（<code> -H</code> 实现http和https的仓库的克隆</p><h2 id="Git-取消代理"><a href="#Git-取消代理" class="headerlink" title="Git 取消代理"></a>Git 取消代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/b481d2a42274">GIt设置代理</a></p><p><a href="https://ericclose.github.io/git-proxy-config.html">文让你了解如何为 Git 设置代理</a></p><p><a href="https://blog.csdn.net/yyou33459/article/details/127651253">git设置代理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Git相信大家是经常使用的东西了, 通过他来管理我们写的代码, 但是最近我同步代码时总是失败,    &lt;code&gt;git clone&lt;/co</summary>
      
    
    
    
    <category term="GIT" scheme="https://jgckm.github.io/categories/GIT/"/>
    
    
    <category term="GIT" scheme="https://jgckm.github.io/tags/GIT/"/>
    
    <category term="代理" scheme="https://jgckm.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>初识JAVA</title>
    <link href="https://jgckm.github.io/posts/d5217737.html"/>
    <id>https://jgckm.github.io/posts/d5217737.html</id>
    <published>2022-12-22T14:10:05.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的高级程序设计语言。</p><p>Java 可运行于多个平台，如 Windows, Mac OS 及其他多种 UNIX 版本的系统。</p><p>本教程通过简单的实例将让大家更好的了解 Java 编程语言。</p><p>移动操作系统 Android 大部分的代码采用 Java 编程语言编程。 </p><h1 id="下载JAVA"><a href="#下载JAVA" class="headerlink" title="下载JAVA"></a>下载JAVA</h1><p><a href="https://www.java.com/zh-CN/download/">JAVA下载地址传送门</a></p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><h2 id="文字教程"><a href="#文字教程" class="headerlink" title="文字教程"></a>文字教程</h2><p>在 <code>Windows操作系统中</code>配置<code>环境变量</code>。虽然现在新版本自动配置环境变量了，但是还是推荐自己配置一下<code>环境变量</code>。</p><p><code>此计算机右键属性</code> -&gt; <code>高级系统设置</code> -&gt; <code>环境变量</code> -&gt; 找到系统变量的 <code>path</code> 点进去 -&gt; 删除安装JAVA自动配置的环境变量 -&gt; 在环境变量中<code>新建</code> -&gt; 变量名 <code>JAVA_HOME</code> 变量值 <code>配置你安装Java的路径</code>(这里不要有<code>bin</code>目录) 设置好了点击 <code>确定</code>-&gt;  来到 <code>系统变量</code> 找到 <code>path</code> 点进去 -&gt; 点击 <code>新建</code> -&gt; 直接填写 <code>%JAVA_HOME\bin%</code> -&gt; 就此一路<code>确定</code> 即可。</p><h2 id="图文教程"><a href="#图文教程" class="headerlink" title="图文教程"></a>图文教程</h2><p>此件算计右键属性</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202212222235045.png" alt="此计算机右键属性"></p><p>高级系统设置</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202212222236434.png" alt="高级系统设置"></p><p>环境变量</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202212222237753.png" alt="点击 环境变量"></p><p>在系统变量中找到 <code>path</code> 并进入</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202212222239348.png" alt="进入到path里面"></p><p>将<code>JAVA默认配置好的系统变量删除</code> (包含JAVA字样的都删除) -&gt; 在 <code>点击确定</code></p><p>在 <code>系统变量</code> 中 <code>新建</code> 创建完 确定即可</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202212222243217.png" alt="新建JAVA_HOME"></p><table><thead><tr><th align="left">变量名</th><th align="left">JAVA_HOME</th></tr></thead><tbody><tr><td align="left">变量值(<strong>注意这是你自己安装JAVA的绝对路径</strong>)</td><td align="left">E:\java</td></tr></tbody></table><p>在系统变量中找到 <code>path</code> 并进入 新建一个 <code>%JAVA_HOME%\bin\</code> (部分Windows重启环境变量可能会消失请看 下面小问题)</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202212222252116.png" alt="新建一个 %JAVA_HOME%\bin\`"></p><p>就此一路确定即可完成 <code>JAVA</code> 的环境配置</p><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><p>部分 <code>Windows10</code> 有个小bug，那就是配置完 <code>环境变量</code> 之后重启电脑发现之前配置的 <code>环境变量</code> 没有了。</p><h2 id="如何解决小问题"><a href="#如何解决小问题" class="headerlink" title="如何解决小问题"></a>如何解决小问题</h2><p>在到配置 <code>path</code> 的时候 <code>直接填写Java的绝对路径</code> 之后一路确定即可。</p><h1 id="运行第一个JAVA程序"><a href="#运行第一个JAVA程序" class="headerlink" title="运行第一个JAVA程序"></a>运行第一个JAVA程序</h1><p>新建一个 <code>HelloWorld.java</code> 文件，在里面写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：<code>String args[]</code> 与 <code>String[] args</code> 都可以执行，但推荐使用 <code>String[] args</code> 这样可以避免歧义和误读</strong></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><h2 id="执行命令解析"><a href="#执行命令解析" class="headerlink" title="执行命令解析"></a>执行命令解析</h2><p>以上我们使用了两个命令 <strong>javac</strong> 和 <strong>java</strong>。</p><p><strong>javac</strong> 后面跟着的是java文件的文件名，例如 HelloWorld.java。 该命令用于将 java 源文件编译为 class 字节码文件，如： <strong>javac HelloWorld.java</strong>。</p><p>运行javac命令后，如果成功编译没有错误的话，会出现一个 HelloWorld.class 的文件。</p><p><strong>java</strong> 后面跟着的是java文件中的类名,例如 HelloWorld 就是类名，如: java HelloWorld。</p><p><strong>注意</strong>：java命令后面不要加.class。</p><h1 id="Java能干什么"><a href="#Java能干什么" class="headerlink" title="Java能干什么?"></a>Java能干什么?</h1><h2 id="Java三大平台"><a href="#Java三大平台" class="headerlink" title="Java三大平台"></a>Java三大平台</h2><h3 id="Java-SE"><a href="#Java-SE" class="headerlink" title="Java SE"></a>Java SE</h3><p>Java SE 是Java语言的标准版，用于桌面应用的开发 是其他两个版本的基础 Java可以做但是不如 C和C++，比如过渡动画方面JAVA可能会出现掉帧的情况。比如各种税务管理软件、IDEA、Clion、Pycharm</p><p>学好JAVA SE 的目的就是为今后的 Java EE 开发<strong>打基础</strong>。主要的锻炼逻辑思维能力</p><h3 id="Java-ME"><a href="#Java-ME" class="headerlink" title="Java ME"></a>Java ME</h3><p>Java ME 是 Java 语言的（小型版） ，用于嵌入式电子设备或小型移动设备。比如 电视机、微波炉、手机（塞班系统，但是随着诺基亚宣布停止开发塞班系统和生产塞班手机，Java ME 也就此没落）、相机、鸿蒙、安卓等电子设备。</p><h3 id="Java-EE"><a href="#Java-EE" class="headerlink" title="Java EE"></a>Java EE</h3><p>Java EE 是 Java 语言的（企业版），用于 web 方向的网站开发。这个领域，是当之无愧的 <strong>No1</strong></p><p>网站开发：浏览器+服务器。比如微服务、springcloud</p><h1 id="Java的主要特性"><a href="#Java的主要特性" class="headerlink" title="Java的主要特性"></a>Java的主要特性</h1><ul><li>面相对象</li><li>安全性</li><li>多线程</li><li>简单易用</li><li>开源</li><li>跨平台</li></ul><h1 id="跨平台的原理"><a href="#跨平台的原理" class="headerlink" title="跨平台的原理"></a>跨平台的原理</h1><ul><li>Java语言的跨平台是通过虚拟机实现的。</li><li>Java语言不是直接运行在操作系统里面的。而是运行在虚拟机中。</li><li>针对不同的操作系统，安装不同的虚拟机就可以了。</li></ul><h1 id="JRE和JDK"><a href="#JRE和JDK" class="headerlink" title="JRE和JDK"></a>JRE和JDK</h1><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>JDK（Java Development kit）：Java开发工具包</p><ul><li>JVM（Java Virtual Machine）：Java虚拟机，真正运行 Java 程序的地方</li><li>核心类库：Java 事先定义好的东西 如 System.out.println()</li><li>开发工具：Javac 编译工具 Java 运行工具 jdb调试工具 jhat 内存分析工具等</li></ul><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p>JRE（java Runtime Envirment）：Java运行环境</p><ul><li>JVM（Java Virtual Machine）：Java虚拟机，真正运行 Java 程序的地方</li><li>核心类库：Java 事先定义好的东西 如 System.out.println()</li><li>运行工具：运行工具</li></ul><h2 id="JDK、JRE、JVM的关系"><a href="#JDK、JRE、JVM的关系" class="headerlink" title="JDK、JRE、JVM的关系"></a>JDK、JRE、JVM的关系</h2><p><code>JDK</code> 包含 <code>JRE</code>  <code>JRE</code> 包含<code>JVM</code> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的高级程序设计语言。&lt;/p&gt;
&lt;p&gt;Java 可运行于多个</summary>
      
    
    
    
    <category term="JAVA" scheme="https://jgckm.github.io/categories/JAVA/"/>
    
    
    <category term="JAVA" scheme="https://jgckm.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>VS中设置#define _CRT_SECURE_NO_WARNINGS的两种方式</title>
    <link href="https://jgckm.github.io/posts/bbee8447.html"/>
    <id>https://jgckm.github.io/posts/bbee8447.html</id>
    <published>2022-12-18T12:17:29.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在编译老的用 <code>C语言</code> 的开源项目如 <code>lua源包</code> 的时候，可能因为一些老的 <code>.c</code> 文件使用了 <code>strcpy</code> , <code>scanf</code>等不安全的函数，而报警告和错误，而导致无法编译通过。</p><p>此时我们有两种解决方案： </p><h1 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h1><p>在指定的源文件的开头定义：<code>#define _CRT_SECURE_NO_WARNINGS</code> （只会在该文件里起作用）</p><h1 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h1><p>在项目属性里设置，这会在整个项目里生效，依次选择：<code>**属性-&gt;配置属性-&gt;C/C++ -&gt;预处理器-&gt;预处理器定义-&gt;编辑**</code></p><p>最下面加上一行：<code>_CRT_SECURE_NO_WARNINGS</code>  <strong>（注意不需要#define）</strong></p><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202212182022812.png" alt="总共的流程"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在编译老的用 &lt;code&gt;C语言&lt;/code&gt; 的开源项目如 &lt;code&gt;lua源包&lt;/code&gt; 的时候，可能因为一些老的 &lt;code</summary>
      
    
    
    
    <category term="C" scheme="https://jgckm.github.io/categories/C/"/>
    
    
    <category term="C" scheme="https://jgckm.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>使用Notepad++替换Windows记事本</title>
    <link href="https://jgckm.github.io/posts/35927ff5.html"/>
    <id>https://jgckm.github.io/posts/35927ff5.html</id>
    <published>2022-12-18T03:05:20.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因 notepad++带有政治色彩，使用软件必须同意才可以，我是不喜欢为什么要这样，已经弃了，也请大家擦亮眼睛</p></blockquote><p><del>Windows自带的的 notepad 实在是难用(一言难尽,收起小尾巴)，而<code>notepad++</code>是业界知名度非常好用的文本编辑器。</del></p><h1 id="默认使用-notepad-打开-txt文本文件"><a href="#默认使用-notepad-打开-txt文本文件" class="headerlink" title="默认使用 notepad++ 打开.txt文本文件"></a><del>默认使用 notepad++ 打开.txt文本文件</del></h1><p>这种很常见，只需要在选中 <code>.txt</code> 右键 <code>打开方式</code> 选择 <code>notepad++</code>  在勾选上始终使用此程序打开 <code>.txt</code> 文件，确定即可。</p><p>这种方式比较自由 既可以用 <code>notepad++</code> 打开也可以选择 系统的记事本打开。</p><h1 id="其他的程序默认弹出记事本打开，想使用notepad-代替记事本"><a href="#其他的程序默认弹出记事本打开，想使用notepad-代替记事本" class="headerlink" title="其他的程序默认弹出记事本打开，想使用notepad++ 代替记事本"></a><del>其他的程序默认弹出记事本打开，想使用notepad++ 代替记事本</del></h1><p>使用这种方法后系统记事本将被 <code>notepad++</code> 接管，记事本打开后是 <code>notepad++</code> 程序，但是系统记事本就无法被打开了（一般不会使用系统记事本来看代码，推荐使用 <code>notepad++</code> 来查看代码，轻量编辑代码）</p><h2 id="使用命令替换系统记事本"><a href="#使用命令替换系统记事本" class="headerlink" title="使用命令替换系统记事本"></a><del>使用命令替换系统记事本</del></h2><ol><li><p>使用系统管理员身份打开命令提示符 </p></li><li><p>运行以下命令</p><p>32位 notepad++：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot; /v &quot;Debugger&quot; /t REG_SZ /d &quot;\&quot;%ProgramFiles(x86)%\Notepad++\notepad++.exe\&quot; -notepadStyleCmdline -z&quot; /f</span><br></pre></td></tr></table></figure><p><strong>注意: <code>\&quot;%ProgramFiles(x86)%\Notepad++\notepad++.exe\</code> 为 <code>notepad++</code> 安装的目录 如果你的 notepad++ 是安装在其他盘符请自行修改路径</strong></p><p>64位 notepad++：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot; /v &quot;Debugger&quot; /t REG_SZ /d &quot;\&quot;%ProgramFiles%\Notepad++\notepad++.exe\&quot; -notepadStyleCmdline -z&quot; /f</span><br></pre></td></tr></table></figure><p><strong>注意: <code>\&quot;%ProgramFiles%\Notepad++\notepad++.exe\</code> 为 <code>notepad++</code> 安装的目录 如果你的 notepad++ 是安装在其他盘符请自行修改路径</strong></p></li></ol><p>执行完毕之后就可以了，默认的记事本已经改为了 <code>notepad++</code></p><h1 id="恢复默认的记事本"><a href="#恢复默认的记事本" class="headerlink" title="恢复默认的记事本"></a>恢复默认的记事本</h1><p>恢复更改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg delete &quot;HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot; /v &quot;Debugger&quot; /f</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;因 notepad++带有政治色彩，使用软件必须同意才可以，我是不喜欢为什么要这样，已经弃了，也请大家擦亮眼睛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;Windows自带的的 notepad 实在是难用(一言难尽,收起小尾巴)，而&lt;co</summary>
      
    
    
    
    <category term="Windows" scheme="https://jgckm.github.io/categories/Windows/"/>
    
    
    <category term="Windows" scheme="https://jgckm.github.io/tags/Windows/"/>
    
    <category term="记事本" scheme="https://jgckm.github.io/tags/%E8%AE%B0%E4%BA%8B%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>vue打包后引入js和css用相对路径引入</title>
    <link href="https://jgckm.github.io/posts/23840d68.html"/>
    <id>https://jgckm.github.io/posts/23840d68.html</id>
    <published>2022-08-30T07:00:05.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="✨前言"><a href="#✨前言" class="headerlink" title="✨前言"></a>✨前言</h1><p>今天使用Vue打包后上传至Github Pages 静态托管，一打开白屏啥都没有</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208301508438.png" alt="image-20220830150852279"></p><p>白茫茫一片啥都没有。（哎，这啥情况😑）</p><h1 id="🔎寻找问题"><a href="#🔎寻找问题" class="headerlink" title="🔎寻找问题"></a>🔎寻找问题</h1><p>接着 <code>F12</code>看来一下</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208301510394.png" alt="image-20220830151019323"></p><p>红了一大片，显示资源没找到？我接着又回去找源文件看了才发现问题，特此记录</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208301512056.png" alt="image-20220830151224995"></p><p>在打包生成的文件 <code>index.html</code>找到问题所在 </p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208301514037.png" alt="image-20220830151418978"></p><p>所有静态资源都用的是<code>绝对路径</code>使用绝对路径直接导致资源无法找到</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208301516290.png" alt="image-20220830151610205"></p><p>这样资源肯定是找不到的，所以得用<code>相对路径</code></p><h1 id="⚙解决问题"><a href="#⚙解决问题" class="headerlink" title="⚙解决问题"></a>⚙解决问题</h1><p><code>绝对路径</code>行不通那就<code>相对路径</code></p><p>在项目中找到 <code>vue.config.js</code>文件配置</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208301521258.png" alt="image-20220830152131192"></p><p>添加如下代码：(这里有坑往下看)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;././&quot;</span>,</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后重新打包即可看到页面内容了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h1 id="🛹踩坑"><a href="#🛹踩坑" class="headerlink" title="🛹踩坑"></a>🛹踩坑</h1><p>这之后，我又开始在本地环境跑，Github Pages 上面跑的好好的，但是在本地环境运行不了呢</p><p>前前后后整了2个多小时，才找到答案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span> ? <span class="string">&quot;./&quot;</span> : <span class="string">&quot;././&quot;</span>,</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>改成这个样子才可以</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;✨前言&quot;&gt;&lt;a href=&quot;#✨前言&quot; class=&quot;headerlink&quot; title=&quot;✨前言&quot;&gt;&lt;/a&gt;✨前言&lt;/h1&gt;&lt;p&gt;今天使用Vue打包后上传至Github Pages 静态托管，一打开白屏啥都没有&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://</summary>
      
    
    
    
    <category term="Web" scheme="https://jgckm.github.io/categories/Web/"/>
    
    <category term="Vue" scheme="https://jgckm.github.io/categories/Web/Vue/"/>
    
    
    <category term="vue" scheme="https://jgckm.github.io/tags/vue/"/>
    
    <category term="Github" scheme="https://jgckm.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>shell入门</title>
    <link href="https://jgckm.github.io/posts/16d516d8.html"/>
    <id>https://jgckm.github.io/posts/16d516d8.html</id>
    <published>2022-08-22T06:19:43.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p></blockquote><p>脚本以 <code>#!/bin/bash</code> 开头(指定解析器) </p><p>执行方式 </p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>[bash&#x2F;sh] [绝对路径或者相对路径]</td><td>执行脚本</td></tr></tbody></table><ol><li>采用 <code>bash</code> 或 <code>sh</code> 脚本的相对路径或者绝对路径(不用赋予脚本+x权限)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash hello.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>直接写出相对路径或者是绝对路径(这种方式必须需要权限才可以)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/scripts/hello.sh</span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="常用系统变量"><a href="#常用系统变量" class="headerlink" title="常用系统变量"></a>常用系统变量</h2><p>$HOME、$PWD、$SHELL、$USER等</p><p>如果想要看全局变量 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">env</span><br><span class="line"></span><br><span class="line">printenv</span><br><span class="line"></span><br><span class="line">printenv USER # 获取 USER 全局变量</span><br><span class="line"></span><br><span class="line">set # 包含了所有的全局变量</span><br></pre></td></tr></table></figure><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p>语法  </p><ul><li>变量名&#x3D;变量值 <code>注意：=前后不能有空格</code></li><li>撤销变量 ：unset 变量名</li><li>声明静态变量(不可以改变) readonly 变量 ，<code>注意不能 unset 撤销</code></li></ul><p>变量定义规则</p><ul><li>变量名称可以由字母、数字、下划线组成，但是 <code>不能以数字开头</code>，<code>环境变量建议大写</code></li><li>等号两侧不能有空格</li><li>在 bash 中，变量默认都是字符串类型，无法直接进行数值运算 <code>a =$[2+1]</code>或<code>a=$((2+1))</code></li><li>变量的值如果有空格，需要使<code>用双引号或单引号</code></li><li>双引号可以解析里面的$变量</li><li>单引号直接输入</li></ul><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><h2 id="n"><a href="#n" class="headerlink" title="$n"></a><code>$n</code></h2><p><code>$n</code> n 为数字，$0 为该脚本的名称，$1-$9表示一到九个参数，十以上的参数，需要用大括号包含，如${10}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># parameter.sh</span></span><br><span class="line"><span class="built_in">echo</span> ============<span class="variable">$0</span>===============</span><br><span class="line"><span class="built_in">echo</span> script name: <span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> parameter1: <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> parameter2: <span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">=================运行结果======================</span><br><span class="line">./parameter.sh abc def</span><br><span class="line">============./parameter.sh===============</span><br><span class="line">script name: ./parameter.sh</span><br><span class="line">parameter1: abc</span><br><span class="line">parameter2: def</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="$#"></a><code>$#</code></h2><p>输出 输入参数个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;============$0===============&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">echo script name: $0</span></span><br><span class="line"><span class="string">echo parameter1: $1</span></span><br><span class="line"><span class="string">echo parameter2: $2</span></span><br><span class="line"><span class="string">echo &#x27;</span>===========<span class="variable">$#</span>===============<span class="string">&#x27;</span></span><br><span class="line"><span class="string">echo parameter numbers: $#</span></span><br><span class="line"><span class="string">=================运行结果========================</span></span><br><span class="line"><span class="string">script name: ./parameter.sh</span></span><br><span class="line"><span class="string">parameter1: abc</span></span><br><span class="line"><span class="string">parameter2: def</span></span><br><span class="line"><span class="string">===========$#===============</span></span><br><span class="line"><span class="string">parameter numbers: 2</span></span><br></pre></td></tr></table></figure><h2 id="和"><a href="#和" class="headerlink" title="$* 和 $"></a><code>$*</code> 和 <code>$</code></h2><p>输出所有参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> ============<span class="variable">$0</span>===============</span><br><span class="line"><span class="built_in">echo</span> script name: <span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> parameter1: <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> parameter2: <span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;===========$#===============&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> parameter numbers: <span class="variable">$#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;===========$#===============&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> parameter numbers: <span class="variable">$#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;===========$*===============&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> $*</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;===========$@===============&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$@</span></span><br><span class="line">============运行结果============</span><br><span class="line">============./parameter.sh===============</span><br><span class="line">script name: ./parameter.sh</span><br><span class="line">parameter1: abc</span><br><span class="line">parameter2: def</span><br><span class="line">===========<span class="variable">$#</span>===============</span><br><span class="line">parameter numbers: 2</span><br><span class="line">===========<span class="variable">$#</span>===============</span><br><span class="line">parameter numbers: 2</span><br><span class="line">===========$*===============</span><br><span class="line">abc def</span><br><span class="line">===========<span class="variable">$@</span>===============</span><br><span class="line">abc def</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title="$?"></a><code>$?</code></h1><p>最后一次执行命令的返回状态，如果这个变量的值为0，如果这个命令的值为0，证明上一个命令执行正确执行：如果这个变量的值非0(具体那个数，由命令自己来决定)，则证明上一个命令执行不正确了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。&lt;/p&gt;
&lt;p&gt;Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。&lt;/p</summary>
      
    
    
    
    <category term="Linux" scheme="https://jgckm.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://jgckm.github.io/categories/Linux/Shell/"/>
    
    
    <category term="Linux" scheme="https://jgckm.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="https://jgckm.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令(三)</title>
    <link href="https://jgckm.github.io/posts/33875d90.html"/>
    <id>https://jgckm.github.io/posts/33875d90.html</id>
    <published>2022-08-19T05:17:52.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h1><h2 id="gzip-gunzip-压缩"><a href="#gzip-gunzip-压缩" class="headerlink" title="gzip &#x2F; gunzip 压缩"></a>gzip &#x2F; gunzip 压缩</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>gzip [文件]</td><td>压缩 [文件] 只能将文件压缩为*.gz文件</td></tr><tr><td>gunzip [文件.gz]</td><td>解压缩文件命令</td></tr></tbody></table><h3 id="经验技巧"><a href="#经验技巧" class="headerlink" title="经验技巧"></a>经验技巧</h3><blockquote><ol><li>只能压缩文件，不能压缩目录 </li><li>不保留原来的文件</li><li>同时多个文件会产生多个压缩包</li></ol></blockquote><h2 id="zip-unzip-压缩"><a href="#zip-unzip-压缩" class="headerlink" title="zip &#x2F; unzip 压缩"></a>zip &#x2F; unzip 压缩</h2><p>可以保留源文件</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>zip -r [压缩的名字.zip] [路径]</td><td>-r 压缩目录</td></tr><tr><td>unzip -d [解压目录] [文件名.zip]</td><td>-d 指定目录</td></tr></tbody></table><h2 id="tar-打包"><a href="#tar-打包" class="headerlink" title="tar 打包"></a>tar 打包</h2><p>功能： 打包目录，压缩后的文件格式.ta</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>-c</td><td>产生打包文件</td></tr><tr><td>-v</td><td>显示.tar打包信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar 文件</td></tr><tr><td>-c</td><td>解压到指定的目录</td></tr></tbody></table><p>常用命令组合</p><ul><li><p>压缩</p></li><li><p>tar -zcvf temp.tar.gz initial-setup-ks.cfg info 公共&#x2F;</p><ul><li><p>-zcvf 是参数</p></li><li><p>temp.tar.gz 是打包后的名称</p></li><li><p>initial-setup-ks.cfg info 公共&#x2F; 打包的内容 或者是 目录</p></li></ul></li><li><p>解压</p></li><li><p>tar -zxvf temp.tar.gz -C &#x2F;temp</p><ul><li>-zxvf 是参数</li><li>temp.tar.gz 是要解压的文件</li><li>-C &#x2F;temp 解压到的目录</li></ul></li></ul><h1 id="磁盘查看和分区类"><a href="#磁盘查看和分区类" class="headerlink" title="磁盘查看和分区类"></a>磁盘查看和分区类</h1><h2 id="du-查看文件和目录占用的磁盘空间"><a href="#du-查看文件和目录占用的磁盘空间" class="headerlink" title="du 查看文件和目录占用的磁盘空间"></a>du 查看文件和目录占用的磁盘空间</h2><p>du [目录或文件夹] 显示目录下每个子目录的磁盘使用情况</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-h</td><td>以人们易懂的GBytes，MBytes，KBytes 等格式自行显示</td></tr><tr><td>-a</td><td>不仅查看子目录大小，还要包括文件</td></tr><tr><td>-c</td><td>显示所用文件和子目录大小后，显示总和</td></tr><tr><td>-s</td><td>显示总和</td></tr><tr><td>–max-depth&#x3D;n</td><td>指定统计目录的深度为第 n 层</td></tr></tbody></table><h2 id="df-查看磁盘空间的可以使用情况"><a href="#df-查看磁盘空间的可以使用情况" class="headerlink" title="df  查看磁盘空间的可以使用情况"></a>df  查看磁盘空间的可以使用情况</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>df -h</td><td>以人们易懂的GBytes，MBytes，KBytes 等格式自行显示</td></tr></tbody></table><h2 id="lsblk-查看设备挂载情况"><a href="#lsblk-查看设备挂载情况" class="headerlink" title="lsblk 查看设备挂载情况"></a>lsblk 查看设备挂载情况</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>lsblk -f</td><td>查看详细的系统挂载情况，显示文件系统信息  和UUID信息</td></tr><tr><td>lsblk -l</td><td>查看当前磁盘信息</td></tr></tbody></table><h2 id="mount-umount-挂载-卸载"><a href="#mount-umount-挂载-卸载" class="headerlink" title="mount&#x2F;umount 挂载&#x2F;卸载"></a>mount&#x2F;umount 挂载&#x2F;卸载</h2><p>对于Linux用户来说，不论有几个分区，分别给哪一个目录使用，它总归就是一个根目录，一个独立且唯一的文件结构。</p><p>Linux中每个分区都是用来组成整个文件系统的一部分，它再用一种叫做“挂载”的处理方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来，要载入的那个分区将使它的存储空间在这个目录下获得。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mount [-t vfstype] [-o option] device dir</td><td>挂载设备</td></tr><tr><td>unmount 设备文件名或挂载点</td><td>卸载设备</td></tr></tbody></table><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-t vfstype</td><td>指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。</td></tr><tr><td>-o</td><td>loop：用来把一个文件当成硬盘分区挂接上系统; ro：采用只读方式挂接设备; rw：采用读写方式挂接设备; iocharset：指定访问文件系统所用字符集</td></tr></tbody></table><ul><li>挂载<ul><li>mount &#x2F;dev&#x2F;cdrom &#x2F;dev&#x2F;cdrom</li></ul></li><li>卸载<ul><li>umount &#x2F;dev&#x2F;cdrom</li></ul></li></ul><h3 id="常用的文件系统类型"><a href="#常用的文件系统类型" class="headerlink" title="常用的文件系统类型"></a>常用的文件系统类型</h3><table><thead><tr><th>描述</th><th>类型</th></tr></thead><tbody><tr><td>光盘或者镜像光盘</td><td>iso9660</td></tr><tr><td>DOS fat16 文件系统</td><td>msdos</td></tr><tr><td>Windows 9x fat32 文件系统</td><td>vfat</td></tr><tr><td>Windows NT ntfs 文件系统</td><td>ntfs</td></tr><tr><td>Mount Windows 文件网络共享</td><td>smbfs</td></tr><tr><td>UNIX(Linux) 文件网络共享</td><td>nfs</td></tr></tbody></table><h3 id="设置自动开机挂载"><a href="#设置自动开机挂载" class="headerlink" title="设置自动开机挂载"></a>设置自动开机挂载</h3><p><code>/etc/fstab</code>配置启动挂载</p><h2 id="fdisk-分区"><a href="#fdisk-分区" class="headerlink" title="fdisk 分区"></a>fdisk 分区</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>fdisk -l</td><td>查看磁盘分区</td></tr></tbody></table><h3 id="经验技巧-1"><a href="#经验技巧-1" class="headerlink" title="经验技巧"></a>经验技巧</h3><p>该命令只能在 root 用户下使用</p><p>插入硬盘需要重启才可以看到硬盘</p><p><code>fdisk /dev/sdb</code> &#x3D;&gt; <code>m</code> &#x3D;&gt;  <code>n</code> &#x3D;&gt; <code>p</code> &#x3D;&gt;    默认直接 <code>Enter</code> &#x3D;&gt; 默认直接 <code>Enter</code> </p><p>流程截图</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208211454768.png" alt="image-20220821145425620"></p><p>到了这一步系统还是无法认识它的，所以我们继续 对硬盘进行 <strong>格式化</strong></p><p>格式化用到了 mkfs 这个命令</p><p>直接执行 <code>mkfs -t xfs /dev/sdb1</code> </p><p>在设置挂载点 mount &#x2F;dev&#x2F;sdb1 &#x2F;home&#x2F;jgckm</p><p>如果想要卸载 umount &#x2F;home&#x2F;jgckm</p><h1 id="进程管理类"><a href="#进程管理类" class="headerlink" title="进程管理类"></a>进程管理类</h1><h2 id="ps-查看当前系统进程状态"><a href="#ps-查看当前系统进程状态" class="headerlink" title="ps  查看当前系统进程状态"></a>ps  查看当前系统进程状态</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>列出带有终端的所有用户进程</td></tr><tr><td>x</td><td>列出当前用户的所有进程，包括没有终端的进程</td></tr><tr><td>u</td><td>面相用户友好的显示风格</td></tr><tr><td>-e</td><td>列出所有进程</td></tr><tr><td>-u</td><td>列出某个应用关联的所有进程</td></tr><tr><td>-f</td><td>显示完整格式的进程列表</td></tr></tbody></table><p>经常用到的命令</p><p><code>ps aux | less</code>   查看系统中所有进程</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208211852732.png" alt="image-20220821185212591"></p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>USER</td><td>该进程是哪个用户产生的</td></tr><tr><td>PID</td><td>进程的ID</td></tr><tr><td>%CPU</td><td>该进程占用%CPU的百分比，占用越高，进程就越耗费资源</td></tr><tr><td>%MEM</td><td>该进程占用物理内存的百分比，占用越高，进程就月耗费资源</td></tr><tr><td>VSZ</td><td>该进程占用物理内存的大小，单位KB</td></tr><tr><td>RSS</td><td>该进程占用实际物理内存的大小，单位KB</td></tr><tr><td>TTY</td><td>该进程是哪个终端中运行的，对于 CnetOS 来说，ttyl 是图形化终端</td></tr><tr><td>tty2-tty6</td><td>是本地的字符界面终端，pts&#x2F;0-255代表虚拟终端</td></tr><tr><td>STAT</td><td>进程状态。常见的状态有：R：运行状态、S：睡眠状态、T：暂停状态、Z：僵尸状态、s：包含子进程、l：多线程、+：前台显示</td></tr><tr><td>STATRT</td><td>该进程的启动时间</td></tr><tr><td>TIME</td><td>该进程占用CPU的运算时间，注意不是系统时间</td></tr><tr><td>COMMAND</td><td>产生此进程的命令名</td></tr></tbody></table><p><code>ps -rf </code> 可以查看 子父进程之间的关系</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208211937716.png" alt="image-20220821193742524"></p><p>这里基本上是和 <code>ps aux | less</code> 一样</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>PPID</td><td>父进程的PID  (就是有谁来启动的)</td></tr></tbody></table><h3 id="经验技巧-2"><a href="#经验技巧-2" class="headerlink" title="经验技巧"></a>经验技巧</h3><p>如果想查看进程的 CPU 占用率和内存使用率，可以使用 aux</p><p>如果想看进程的父进程 ID 可以使用 ef</p><h2 id="kill-终止进程"><a href="#kill-终止进程" class="headerlink" title="kill 终止进程"></a>kill 终止进程</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>kill [选项] [进程号]</td><td>通过进程号杀死进程</td></tr><tr><td>killall [进程号]</td><td>通过进程名杀死进程，也支持通配符，这在系统引负载过大而变得很慢的时候很有用</td></tr><tr><td>kill -9 [进程号]</td><td>强迫进程立即关闭</td></tr></tbody></table><ul><li>[进程号]  这里指的是 PID</li></ul><h2 id="pstree-查看进程树"><a href="#pstree-查看进程树" class="headerlink" title="pstree 查看进程树"></a>pstree 查看进程树</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>pstree -p</td><td>显示PID</td></tr><tr><td>pstree -u</td><td>显示进程的所属用户</td></tr></tbody></table><h2 id="top-实时监控系统进程状态"><a href="#top-实时监控系统进程状态" class="headerlink" title="top 实时监控系统进程状态"></a>top 实时监控系统进程状态</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td></td></tr><tr><td>top -d [秒数]</td><td>指定 top 命令每隔几秒更新。默认是 3 秒 在 top 命令的交互模式当中可以执行的命令:</td></tr><tr><td>top -i</td><td>使用 top 不显示闲置或者僵死的命令</td></tr><tr><td>top -p</td><td>通过指定监控进程 ID 来仅仅监控某个进程的状态</td></tr></tbody></table><p>操作</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以 CPU 使用率来排序，默认就是此项</td></tr><tr><td>M</td><td>已内存的使用率来排序</td></tr><tr><td>N</td><td>以 PID 排序</td></tr><tr><td>q</td><td>退出</td></tr></tbody></table><h2 id="netstat-显示网络状态和端口占用信息"><a href="#netstat-显示网络状态和端口占用信息" class="headerlink" title="netstat 显示网络状态和端口占用信息"></a>netstat 显示网络状态和端口占用信息</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>netstat -anp | grep [进程号]</td><td>查看该进程网络信息</td></tr><tr><td>netstat -nlp | grep [端口号]</td><td>查看网络端口号占用情况</td></tr></tbody></table><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>显示正在监听 (listen) 和为监听的套接字 (socket)</td></tr><tr><td>-n</td><td>拒绝显示别名，能显示数字的全部转化为数字</td></tr><tr><td>-l</td><td>列出在监听服务的状态</td></tr><tr><td>-p</td><td>表示显示哪个进程在调用</td></tr></tbody></table><h1 id="crontab-系统定时任务"><a href="#crontab-系统定时任务" class="headerlink" title="crontab 系统定时任务"></a>crontab 系统定时任务</h1><h2 id="crontab-服务管理"><a href="#crontab-服务管理" class="headerlink" title="crontab 服务管理"></a>crontab 服务管理</h2><h3 id="重启-crond-服务"><a href="#重启-crond-服务" class="headerlink" title="重启  crond  服务"></a>重启  crond  服务</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>systemctl restart crond</td><td>重启 crond 服务</td></tr></tbody></table><h2 id="crontab-定时任务设置"><a href="#crontab-定时任务设置" class="headerlink" title="crontab 定时任务设置"></a>crontab 定时任务设置</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>crontab -e</td><td>编辑crontab 定时任务</td></tr><tr><td>-l</td><td>查询 crontab 任务</td></tr><tr><td>-r</td><td>删除当前用户所有 crontab 任务</td></tr></tbody></table><p>crontab -e 输入命令之后会 会进入 crontab 编辑页面 </p><p><code>* * * * *</code> 执行的任务 (分，时，日，月，周)</p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个 <code>*</code></td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个 <code>*</code></td><td>一天当中的第几个小时</td><td>0-23</td></tr><tr><td>第三个 <code>*</code></td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个 <code>*</code></td><td>一年当中的第几个月</td><td>1-12</td></tr><tr><td>第五个 <code>*</code></td><td>一周当中的第几天</td><td>0-7(0和7都代表星期日)</td></tr></tbody></table><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>表示在任何时间。比如第一个 <code>*</code> 就代表一小时中每分钟都执行一次的意思</td></tr><tr><td><code>,</code></td><td>代表不连续的时间。比如 “0 8,12,6 * * *” 就代表在每天的 8点0分，12点0分，6点0分都执行一次</td></tr><tr><td><code>-</code></td><td>代表连续的世间范围。比如 “0 5 * * 1-6” 代表周一到周六的凌晨5点0分执行命令</td></tr><tr><td><code>*/n</code></td><td>代表每隔多久执行一次。比如 “*&#x2F;10 * * * * “ 代表每隔10分钟就执行一遍命令</td></tr></tbody></table><p>列子</p><table><thead><tr><th>时间</th><th>含义</th></tr></thead><tbody><tr><td><code>45 22 * * *</code></td><td>每天  22点45分 执行命令</td></tr><tr><td><code>0 17 * * 1</code></td><td>每周一的 17点0分 执行命令</td></tr><tr><td><code>0 5 1,15 * *</code></td><td>每月的 1号 和 15号 凌晨 5点 执行命令</td></tr><tr><td><code>40 4 * * 1-5</code></td><td>每周一到周五的 4点40分 执行命令</td></tr><tr><td><code>*/10 4 * * *</code></td><td>每天的 4点 每隔 10分钟 执行一次命令</td></tr><tr><td><code>0 0 1,15 * 1</code></td><td>每个月的 1号和15号 每周一的 0点0分 会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。非常容易让管理员混乱</td></tr></tbody></table><h1 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h1><h2 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h2><blockquote><p>RPM (RedHat Package  Manager) RedHat 软件包管理工具，类似 Windows 里面的 setup.exe 是 Linux 这系列操作系统里面的打包安装工具，他虽然是 RedHat 的标志，但是概念是通用的。</p></blockquote><h2 id="RPM-包的名称格式"><a href="#RPM-包的名称格式" class="headerlink" title="RPM 包的名称格式"></a>RPM 包的名称格式</h2><p>Apache-1.3.12-11.i386.rpm</p><ul><li>“apache” 软件的名称</li><li>“1.3.12-11” 软件的版本号，主版本和此版本</li><li>“i386” 是软件所运行的硬件平台，Intel32 位处理器统称</li><li>“rpm” 文件扩展名，代表 RPM包</li></ul><h2 id="RPM-查询命令"><a href="#RPM-查询命令" class="headerlink" title="RPM 查询命令"></a>RPM 查询命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>rpm -qa</td><td>查询安装过的 RPM 包</td></tr><tr><td>rpm -qi [包名]</td><td>显示 [包名] 的详情信息</td></tr></tbody></table><p>通常会使用管道进行过滤 rpm -qa | grep git</p><h2 id="RPM-卸载命令"><a href="#RPM-卸载命令" class="headerlink" title="RPM 卸载命令"></a>RPM 卸载命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>rpm -e [包名]</td><td>卸载 [包名]</td></tr><tr><td>rpm –nodeps</td><td>卸载软件时，不检查依赖。这样的话，那些使用该软件的包的软件在次之后可能就不能正常工作了</td></tr></tbody></table><h2 id="RPM-安装命令"><a href="#RPM-安装命令" class="headerlink" title="RPM 安装命令"></a>RPM 安装命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>rpm -i</td><td>install 安装</td></tr><tr><td>-v</td><td>–verbose，显示详情信息</td></tr><tr><td>-h</td><td>–hash，进度条</td></tr><tr><td>–nodeps</td><td>安装前不检查依赖</td></tr></tbody></table><p>经常使用 <code>rpm -ivh [包名]</code> 进行安装</p><h2 id="YUM-仓库配置"><a href="#YUM-仓库配置" class="headerlink" title="YUM 仓库配置"></a>YUM 仓库配置</h2><p>YUM (Yellow dog Updater, Modifed) 是一个在 Fedora 和 RedHat 以及 CentOS 中的 Shell 前端软件包管理器。基于 RPM 包管理器，能够从指定的服务器自动下载 RPM 包并且安装，<code>可以自动处理依赖关系</code>，并且一次安装所有依赖的软件包，无需繁琐的一次下载、安装。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>yum [选项] [参数]</td><td>安装</td></tr></tbody></table><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-y</td><td>对所有提问都回答yes</td></tr></tbody></table><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>install [包名]</td><td>安装包名</td></tr><tr><td>update [包名]</td><td>更新包名</td></tr><tr><td>check-update</td><td>检测是否有可用的跟心 RPM 软件包</td></tr><tr><td>remove [包名]</td><td>删除[包名]</td></tr><tr><td>list [包名] (也可以使用管道)</td><td>显示 [包名软件信心]</td></tr><tr><td>clean</td><td>清除 yum 过期的缓存</td></tr><tr><td>deplist</td><td>显示 yum 软件包的所有依赖关系</td></tr></tbody></table><h2 id="修改网络-YUM-源"><a href="#修改网络-YUM-源" class="headerlink" title="修改网络 YUM 源"></a>修改网络 YUM 源</h2><blockquote><p>因为每次下载 都会自动查找最近的镜像源 所以一 已经没必要更改镜像源的必要了</p></blockquote><ol><li><p>安装 wget，wget 用来从指定的 URL 下载文件</p><ol><li><pre><code>yum -y install wget<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 在 `/etc/yum.repos.d/` 目录下，备份默认的 repos 文件</span><br><span class="line"></span><br><span class="line">   1. ```</span><br><span class="line">      cd /etc/yum.repos.d/</span><br><span class="line">      </span><br><span class="line">      cp CentOS-Base.repo CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure></code></pre></li></ol></li><li><p>直接去 <a href="https://developer.aliyun.com/mirror/centos?spm=a2c6h.13651102.0.0.3e221b11ry63yM">阿里</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;压缩和解压类&quot;&gt;&lt;a href=&quot;#压缩和解压类&quot; class=&quot;headerlink&quot; title=&quot;压缩和解压类&quot;&gt;&lt;/a&gt;压缩和解压类&lt;/h1&gt;&lt;h2 id=&quot;gzip-gunzip-压缩&quot;&gt;&lt;a href=&quot;#gzip-gunzip-压缩&quot; class=&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="https://jgckm.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://jgckm.github.io/categories/Linux/Shell/"/>
    
    
    <category term="Linux" scheme="https://jgckm.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="https://jgckm.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>CSS反向圆角</title>
    <link href="https://jgckm.github.io/posts/10ce6d4e.html"/>
    <id>https://jgckm.github.io/posts/10ce6d4e.html</id>
    <published>2022-08-18T12:00:31.000Z</published>
    <updated>2024-04-14T04:54:41.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><blockquote><p>无意中发现google浏览器标签的小圆角上面正常下面是像外侧圆角的，当时就很好奇，这是怎么实现的，于是自己就开始干了，最初方案用的是js实现的，然后搜索一下CSS也可以实现同样的效果。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208190914357.png" alt="image-20220819091451236"></p><h1 id="🚙js-方案"><a href="#🚙js-方案" class="headerlink" title="🚙js 方案"></a>🚙js 方案</h1><ul><li>监听 li 的点击事件</li><li>每次点击是首先判断 li 是否为第一个或者为最后一个 如果为第一个就没有上一个 li 所以不用圆角，反之下面的 li 就 不用圆角</li><li>通过类名的添加和删除来实现是否圆角</li></ul><h2 id="🔎原理"><a href="#🔎原理" class="headerlink" title="🔎原理"></a>🔎原理</h2><p>就是 让当前点击的 li 的上一个 li 的右下方圆角 和 下一个 li 右上方圆角，在这个过程前要先判断是否是第一个li(因为第一个 li 没有上面没有 li )和是否是最后一个 li(因为最后一个li 下面没有 li)，这两种情况要单独操作</p><ul><li>如果是点击第一个(上面没有 li) 直接给下面的 li 添加圆角类名</li><li>如果是点击最后一个(下面没有 li) 直接给 上面的 li 添加圆角类名</li><li>其他情况 都要添加类名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208190955284.png" alt="image-20220819095555189"></p><p>这里虽然和google标签页的样式不一样，但是我感觉这种排列方式还是比较常见的</p><h2 id="DOM结构"><a href="#DOM结构" class="headerlink" title="DOM结构"></a>DOM结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>留言板<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单的DOM结构</p><h2 id="CSS结构"><a href="#CSS结构" class="headerlink" title="CSS结构"></a>CSS结构</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 下圆角 */</span></span><br><span class="line"><span class="selector-class">.bottom-radius</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 上圆角 */</span></span><br><span class="line"><span class="selector-class">.top-radius</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>美化样式</p><h2 id="js-结构"><a href="#js-结构" class="headerlink" title="js 结构"></a>js 结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.main li&#x27;</span>);</span><br><span class="line"><span class="comment">// 首先执行一次</span></span><br><span class="line"><span class="title function_">radiusMethod</span>();</span><br><span class="line"></span><br><span class="line">lis.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">    item.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 清除 之前点击 添加的 active 类名</span></span><br><span class="line">        <span class="title class_">RemoveClassName</span>(lis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给点击对象添加 active 类名</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">radiusMethod</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 圆角添加类名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radiusMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 遍历每一个li 判断 是否有 active 这个类名 </span></span><br><span class="line">    lis.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">className</span> === <span class="string">&#x27;active&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">                lis[i + <span class="number">1</span>].<span class="property">className</span> = <span class="string">&#x27;top-radius&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lis.<span class="property">length</span> - <span class="number">1</span> === i) &#123;</span><br><span class="line">                lis[i - <span class="number">1</span>].<span class="property">className</span> = <span class="string">&#x27;bottom-radius&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">                lis[i + <span class="number">1</span>].<span class="property">className</span> = <span class="string">&#x27;top-radius&#x27;</span>;</span><br><span class="line">                lis[i - <span class="number">1</span>].<span class="property">className</span> = <span class="string">&#x27;bottom-radius&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除类名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RemoveClassName</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item.<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js方案大体就是这个样子，也完美的实现了圆角</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208191011573.gif" alt="GIF"></p><p>我在搜索的时候看到有人使用的是CSS方案，我也试了试</p><h1 id="🚄CSS-方案"><a href="#🚄CSS-方案" class="headerlink" title="🚄CSS 方案"></a>🚄CSS 方案</h1><ul><li>监听 li 的点击事件</li><li>点击li 添加类名 通过 CSS 的选择器来实现不同的样式,并且省去js方案的判断</li></ul><h2 id="🔎原理-1"><a href="#🔎原理-1" class="headerlink" title="🔎原理"></a>🔎原理</h2><ul><li>当然了CSS方案肯定是不能监听点击事件的，还得是js 监听 添加 类名</li><li>通过CSS 选择器 来个 当前点击的 li 来装饰样式 </li><li>li 的伪类元素 负责切圆角</li><li>a 的伪类元素 负责 填充空隙</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208191027691.png" alt="image-20220819102704571"></p><table><thead><tr><th>颜色</th><th>描述</th></tr></thead><tbody><tr><td>黄色</td><td>标签页</td></tr><tr><td>红色</td><td>最终想要得圆角</td></tr><tr><td>淡蓝色(圆形)</td><td>切割圆角</td></tr><tr><td>蓝色(长方形)</td><td>填充空隙</td></tr></tbody></table><p>左右都是相同原理不再赘述</p><h2 id="DOM结构-1"><a href="#DOM结构-1" class="headerlink" title="DOM结构"></a>DOM结构</h2><p>总体上只有css，js 的结构变化最大</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>留言板<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS-结构"><a href="#CSS-结构" class="headerlink" title="CSS 结构"></a>CSS 结构</h2><h3 id="层级关系"><a href="#层级关系" class="headerlink" title="层级关系"></a>层级关系</h3><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208191103185.png" alt="image-20220819110342099"></p><p>大概是这个样子，最后在调整一下就好了，换一下颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* li 的伪类选择器  */</span></span><br><span class="line"><span class="selector-class">.active</span><span class="selector-pseudo">::after</span>,</span><br><span class="line"><span class="selector-class">.active</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* a 的伪类元素 */</span></span><br><span class="line"><span class="selector-class">.active</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>,</span><br><span class="line"><span class="selector-class">.active</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#808080</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.active</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 最后一个 li和 a 不用 after */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span><span class="selector-class">.active</span><span class="selector-pseudo">::after</span>,<span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>,</span><br><span class="line"><span class="comment">/* 第一个 li和 a 不用 before */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child<span class="selector-class">.active</span><span class="selector-pseudo">::before</span>,<span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child <span class="selector-tag">a</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="js-结构-1"><a href="#js-结构-1" class="headerlink" title="js 结构"></a>js 结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.main li&#x27;</span>);</span><br><span class="line">lis.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 清除 之前点击 添加的 active 类名</span></span><br><span class="line">        <span class="title class_">RemoveClassName</span>(lis);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;active&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除类名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RemoveClassName</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item.<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后感觉还是 CSS的方案更好，代码简洁更易懂。最终效果</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208191214713.gif" alt="GIF"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerlink&quot; title=&quot;缘由&quot;&gt;&lt;/a&gt;缘由&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;无意中发现google浏览器标签的小圆角上面正常下面是像外侧圆角的，当时就很好奇，这是怎么实现的，于是自己就开始干</summary>
      
    
    
    
    <category term="Web" scheme="https://jgckm.github.io/categories/Web/"/>
    
    <category term="JavaScript" scheme="https://jgckm.github.io/categories/Web/JavaScript/"/>
    
    
    <category term="CSS" scheme="https://jgckm.github.io/tags/CSS/"/>
    
    <category term="HTML" scheme="https://jgckm.github.io/tags/HTML/"/>
    
    <category term="JavaScript" scheme="https://jgckm.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令(二)</title>
    <link href="https://jgckm.github.io/posts/4d747dbb.html"/>
    <id>https://jgckm.github.io/posts/4d747dbb.html</id>
    <published>2022-08-18T02:14:33.000Z</published>
    <updated>2024-04-14T04:54:41.788Z</updated>
    
    <content type="html"><![CDATA[<p>接着上一篇，继续肝</p><h1 id="事件日期类"><a href="#事件日期类" class="headerlink" title="事件日期类"></a>事件日期类</h1><h2 id="date-设置系统时间"><a href="#date-设置系统时间" class="headerlink" title="date 设置系统时间"></a>date 设置系统时间</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>date</td><td>直接数出  时间信息  如：2022年 08月 18日 星期四 10:20:30 CST</td></tr><tr><td>date +%Y</td><td>显示当前年份</td></tr><tr><td>date+%m</td><td>显示当前月份</td></tr><tr><td>date+%d</td><td>显示当前月的第几天数</td></tr><tr><td>date “+%Y-%m-%d %H:%M:%S”</td><td>输出 年月日时分秒</td></tr><tr><td>date +%s</td><td>当前秒数时间戳</td></tr><tr><td>date -d “1 days ago”</td><td>返回前一天的时间 (1可以自定义)</td></tr><tr><td>date -d “-2 hours ago”</td><td>返回两小时后的时间(-2可以自定义)</td></tr><tr><td>date -s “2017-06-19 20:52:15”</td><td>将系统时间设为 2017-06-19 20:52:15</td></tr><tr><td>hwclock -s</td><td>通过硬件配置系统时间</td></tr><tr><td>ntpdate ntp1.aliyun.com</td><td>联网 同步时间  (阿里云服务)</td></tr></tbody></table><h2 id="cal-查看日历"><a href="#cal-查看日历" class="headerlink" title="cal 查看日历"></a>cal 查看日历</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>cal</td><td>当前做在的月份日历</td></tr><tr><td>cal -1, –one</td><td>只显示当前月份(默认)</td></tr><tr><td>cal -3, –three</td><td>显示上个月、当月和下个月</td></tr><tr><td>cal -s, –sunday</td><td>周日作为一周第一天</td></tr><tr><td>cal -m, –monday</td><td>周一用为一周第一天</td></tr><tr><td>cal -j, –julian</td><td>输出儒略日</td></tr><tr><td>cal -y, –year</td><td>输出整年(当前年)</td></tr><tr><td>cal -V, –version</td><td>显示版本信息并退出</td></tr><tr><td>cal -h, –help</td><td>显示此帮助并退出</td></tr><tr><td>cal 2001</td><td>输出2001整年日历</td></tr></tbody></table><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="useradd-添加新用户"><a href="#useradd-添加新用户" class="headerlink" title="useradd 添加新用户"></a>useradd 添加新用户</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>useradd [用户名]</td><td>添加新用户</td></tr><tr><td>useradd -d &#x2F;home&#x2F;dave david</td><td>创建 dave 文件夹 但是 用户名是 david</td></tr><tr><td>useradd -g [组名] [用户名]</td><td>创建 [用户名] 这个用户，并且组名是 [组名]</td></tr><tr><td>passwd [用户名]</td><td>给新用户设置密码</td></tr><tr><td>exit</td><td>登出</td></tr></tbody></table><h2 id="id-查看用户是否存在"><a href="#id-查看用户是否存在" class="headerlink" title="id 查看用户是否存在"></a>id 查看用户是否存在</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>id [用户名]</td><td>查看用户是否存在</td></tr></tbody></table><h2 id="查看创建了哪些用户"><a href="#查看创建了哪些用户" class="headerlink" title="查看创建了哪些用户"></a>查看创建了哪些用户</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>cat &#x2F;etc&#x2F;passwd</td><td>查看创建了哪些用户</td></tr></tbody></table><h2 id="who-查询登录用户信息"><a href="#who-查询登录用户信息" class="headerlink" title="who 查询登录用户信息"></a>who 查询登录用户信息</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>who am i</td><td></td></tr><tr><td>whoami</td><td></td></tr></tbody></table><ul><li>一个有着哲学问题的命令 文字解释很复杂 请自行测试</li></ul><h2 id="sudo-设置普通用户具有root权限"><a href="#sudo-设置普通用户具有root权限" class="headerlink" title="sudo 设置普通用户具有root权限"></a>sudo 设置普通用户具有root权限</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>sudo [用户名]</td><td>将 [用户名] 设为可以使用 root 权限</td></tr></tbody></table><blockquote><p>执行完毕后 填写用户密码 之后 提示<code>tony 不在 sudoers 文件中。此事将被报告。</code></p><p>那就需要 在 <code>sudoers</code> 中添加配置</p></blockquote><ol><li><p>首先切换回 root 权限</p></li><li><p>在终端输入 <code>vim /etc/sudoers</code></p></li><li><p>找到<code>root    ALL=(ALL)       ALL</code> 这一行 复制并粘贴到下一行</p></li><li><p>修改为 下面的格式  [用户名] 是你想要哪个用户可以使用root权限的用户名</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root   ALL=(ALL)       ALL</span><br><span class="line">[用户名]    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><ol start="5"><li><code>:wq!</code>强制保存退出即可</li></ol><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>userdel [用户名]</td><td>删除 [用户名]</td></tr><tr><td>userdel -r [用户名]</td><td>删除 [用户名] 会删除 <code>/home</code>下面的目录</td></tr></tbody></table><blockquote><p>userdel [用户名] 删除用户不会删除 <code>/home</code> 目录下的 文件 如果想要删除 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line"></span><br><span class="line">rm -rf [用户名]</span><br></pre></td></tr></table></figure><h1 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h1><p>每个用户都有一个用户组组，系统可以对一个用户组中的所有用户集中管理 不同 Linux 系统对用户组的规定有所不同</p><p>如 Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建</p><p>用户组的管理涉及用户组的添加、删除、和修改 实际上就是对<code>/etc/group</code>文件的更新</p><h2 id="groupadd-新增组"><a href="#groupadd-新增组" class="headerlink" title="groupadd 新增组"></a>groupadd 新增组</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>groupadd [组名]</td><td>添加 [组名] 组</td></tr></tbody></table><h2 id="usermod-修改用户"><a href="#usermod-修改用户" class="headerlink" title="usermod 修改用户"></a>usermod 修改用户</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>usermod -g [用户组] [用户名]</td><td>修改用户的对应的用户组</td></tr></tbody></table><h2 id="查看所有用户组"><a href="#查看所有用户组" class="headerlink" title="查看所有用户组"></a>查看所有用户组</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>cat &#x2F;etc&#x2F;group</td><td>查看所有用户组</td></tr></tbody></table><h2 id="groupmod-替换组名"><a href="#groupmod-替换组名" class="headerlink" title="groupmod 替换组名"></a>groupmod 替换组名</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>groupmod -n [新组名] [旧组名]</td><td>替换组名</td></tr></tbody></table><h2 id="groupdel-删除用户组"><a href="#groupdel-删除用户组" class="headerlink" title="groupdel 删除用户组"></a>groupdel 删除用户组</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>groupdel [组名]</td><td>删除 [组名] 组</td></tr></tbody></table><h1 id="文件权限类"><a href="#文件权限类" class="headerlink" title="文件权限类"></a>文件权限类</h1><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><blockquote><p>Linux 系统是一中经典的的多用户系统，不同的用户处于不同的地位，拥有不同的的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一个文件(包括文件目录)的权限作了不同的规定。在Linux中我们可以使用<code>ll</code>或者<code>ls -l</code>命令来显示一个文件的属性以及文件所属的用户和组。</p></blockquote><p>从左到右的<strong>10个字符</strong>表示</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208181439201.png" alt="image-20220818143956110"></p><p>如果没有权限就会出现 [ - ] 而已。从左至右用0-9这些数字来表示</p><ol><li><p>0首尾表示类型</p><p>​在Linux中第一个字符代表这个文件是目录、文件、链接文件等</p><ul><li>-代表文件</li><li>d 代表目录</li><li>l 代表链接目录</li></ul></li><li><p>1-3位确定属主(该文件的所有者)拥有该文件的权限。–User</p></li><li><p>4-6位确定属主组(所有者的同组用户)拥有该文件的权限 –Group</p></li><li><p>7-9位确定其他用户拥有该权限文件的权限 –Other</p></li></ol><h2 id="rwx作用文件和目录的不同解释"><a href="#rwx作用文件和目录的不同解释" class="headerlink" title="rwx作用文件和目录的不同解释"></a>rwx作用文件和目录的不同解释</h2><ol><li>作用到文件：<ul><li>[ r ] 代表可读(read)，看读取，查看</li><li>[ w ] 代表可写(write)，可以修改，但不代表可以删除该文件，删除一个文件的前提条件是对该文件所在目录有写权限，才能删除该文件</li><li>[ x ] 代表可执行(execute)，可以被系统执行</li></ul></li><li>作用到目录<ul><li>[ r ] 代表可以读取(read)，ls 查看目录内容</li><li>[ w ] 代表可以写：可以修改，目录内 创建+删除+重命名目录</li><li>[ x ] label 代表可执行：可以进入该目录</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208181537655.png" alt="image-20220818153736529"></p><h2 id="chmod-改变权限"><a href="#chmod-改变权限" class="headerlink" title="chmod 改变权限"></a>chmod 改变权限</h2><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208181542548.png" alt="image-20220818154251444"></p><p>第一种方式修改权限</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>chmod [{ugoa}{+-&#x3D;}{rwx}]</td><td></td></tr></tbody></table><p>chmod a&#x3D;rwx hello.txt   表示 hello 文件 ugo 权限设置为rwx</p><p>chmod u+rwx hello.txt   + 表示添加权限</p><p>chmod a-rwx hello.txt   - 表示删除权限</p><p>第二种修改权限方法</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>chmod [mod&#x3D;421] [文件或目录]</td><td></td></tr></tbody></table><blockquote><p>经验技巧：</p><p>u: 所有者 g:所有组  o:其他人  a:所有人</p><p>r&#x3D;4 w&#x3D;2  x&#x3D;1rwx&#x3D;4+2+1&#x3D;7</p><p>修改整个文件夹里面的所有文件的所有者、所属组、其他用户都具有可读可写可执行权限</p><p>chmod -R 777 [目录]  </p></blockquote><h2 id="chown-改变文件所有者"><a href="#chown-改变文件所有者" class="headerlink" title="chown 改变文件所有者"></a>chown 改变文件所有者</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>chown [新所有者] [文件]</td><td>文件所有者改为[新所有者]</td></tr><tr><td>chown -R [新所有者] [目录]</td><td>目录下面所有文件的所有者改为[新所有者]</td></tr></tbody></table><h1 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h1><h2 id="find-查找文件或者目录"><a href="#find-查找文件或者目录" class="headerlink" title="find 查找文件或者目录"></a>find 查找文件或者目录</h2><blockquote><p>find 指令将从指定目录下递归遍历其个个子目录，将满足条件显示在终端</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>find [指定范围] [选项]</td><td>搜索[指定范围]</td></tr><tr><td>find [绝对或相对路径] -name [名称]</td><td>查找 [绝对或相对路径] 目录下名称为 [名称] (路径可以省略不写默认当前文件夹)</td></tr><tr><td>find [绝对或相对路径] -name “*.cfg”</td><td>查找 [绝对或相对路径] 目录下名称为 后缀名为  .cfg</td></tr><tr><td>find [路径] -user [用户名]</td><td>查找 [路径] 目录下 [用户名] 创建的文件</td></tr><tr><td>find [路径] -size +10k</td><td>查找 [路径] 目录下 文件大于 10K的</td></tr></tbody></table><h2 id="locate-快速定位文件路径"><a href="#locate-快速定位文件路径" class="headerlink" title="locate 快速定位文件路径"></a>locate 快速定位文件路径</h2><blockquote><p>locate 指令利用事先建立的系统中的所有文件名称及路径的 locate 数据库事先快速定位给定的文件。locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locate 时刻。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>locate [搜索文件]</td><td></td></tr></tbody></table><h3 id="经验技巧："><a href="#经验技巧：" class="headerlink" title="经验技巧："></a>经验技巧：</h3><blockquote><p>由于 locate 指令基于数据库进行查寻，所以第一次运行前，必须使用  <code>updatedb</code></p></blockquote><h2 id="gerp-内容过滤和“-”管道符"><a href="#gerp-内容过滤和“-”管道符" class="headerlink" title="gerp 内容过滤和“|”管道符"></a>gerp 内容过滤和“|”管道符</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>grep [关键词] [文件名]</td><td>查找 [文件名]内 [关键词] 直接输出结果</td></tr><tr><td>grep -n [关键词] [文件名]</td><td>输出结果显示行号</td></tr></tbody></table><h3 id="经验技巧"><a href="#经验技巧" class="headerlink" title="经验技巧"></a>经验技巧</h3><blockquote><p>ls | grep .cfg</p><p>将 <code>ls</code> 的结果 过滤 <code>.cfg</code>并且输出终端</p><p>grep -n hello fileHello | wc</p><p><code>wc</code>是统计词频的，可不是你想的那样😜</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接着上一篇，继续肝&lt;/p&gt;
&lt;h1 id=&quot;事件日期类&quot;&gt;&lt;a href=&quot;#事件日期类&quot; class=&quot;headerlink&quot; title=&quot;事件日期类&quot;&gt;&lt;/a&gt;事件日期类&lt;/h1&gt;&lt;h2 id=&quot;date-设置系统时间&quot;&gt;&lt;a href=&quot;#date-设置系统时间&quot; </summary>
      
    
    
    
    <category term="Linux" scheme="https://jgckm.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://jgckm.github.io/categories/Linux/Shell/"/>
    
    
    <category term="Linux" scheme="https://jgckm.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="https://jgckm.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令(一)</title>
    <link href="https://jgckm.github.io/posts/d0edc1ed.html"/>
    <id>https://jgckm.github.io/posts/d0edc1ed.html</id>
    <published>2022-08-17T01:58:57.000Z</published>
    <updated>2024-04-14T04:54:41.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h1><blockquote><p>Shell 可以看做是命令解释器，为我们提供交互式的文本控制台界面。我们可以通过终端控制台来输入命令，有Shell来进行解析并最终交给内核执行。</p></blockquote><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h2 id="man-获取帮助信息"><a href="#man-获取帮助信息" class="headerlink" title="man 获取帮助信息"></a>man 获取帮助信息</h2><table><thead><tr><th>命令</th><th>功能描述</th></tr></thead><tbody><tr><td>man [命令或配置文件]</td><td>获取帮助信息</td></tr></tbody></table><h2 id="help-获的-shell-内置命令的帮助信息"><a href="#help-获的-shell-内置命令的帮助信息" class="headerlink" title="help 获的 shell 内置命令的帮助信息"></a>help 获的 shell 内置命令的帮助信息</h2><blockquote><p>一部分基础功能的系统命令是直接内嵌在shell中的，系统加载或会随着shell一起加载，常驻系统内存中。这部分命令被称“内置”(built-in)命令，相应的其他命令被称为“外部命令”</p><ul><li>可以通过 <code>type [命令或配置文件]</code> 来查看是否是内置命令 </li><li><code>man -f [命令或配置文件]</code></li></ul></blockquote><table><thead><tr><th>命令</th><th>功能命令</th></tr></thead><tbody><tr><td>help</td><td>获取shell内置命令的帮助信息</td></tr></tbody></table><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table><thead><tr><th>常用快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>ctrl</code>+<code>c</code></td><td>停止进程</td></tr><tr><td><code>ctrl</code>+<code>l</code></td><td>清屏 相当于 <code>clear</code>彻底清屏是 <code>reset</code></td></tr><tr><td>善用<code>tab</code>键</td><td>提示  防止敲错</td></tr><tr><td>上下键</td><td>查找使用过的命令</td></tr></tbody></table><h1 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h1><h2 id="pwd-显示当前工作目录的绝对路径"><a href="#pwd-显示当前工作目录的绝对路径" class="headerlink" title="pwd 显示当前工作目录的绝对路径"></a>pwd 显示当前工作目录的绝对路径</h2><blockquote><p>pwd : print working directory 打印工作目录</p></blockquote><p>用法</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208171118553.png" alt="image-20220817111852405"></p><h2 id="cd-切换工作目录"><a href="#cd-切换工作目录" class="headerlink" title="cd 切换工作目录"></a>cd 切换工作目录</h2><blockquote><p>cd [绝对路径或相对路径]</p></blockquote><p><code>cd -</code> 返回上一次路径</p><h2 id="ls-列出目录的内容"><a href="#ls-列出目录的内容" class="headerlink" title="ls 列出目录的内容"></a>ls 列出目录的内容</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ls</td><td>列出当前目录文件</td></tr><tr><td>ls -a</td><td>列出所有文件，包括以 “.” 开头的隐含文件</td></tr><tr><td>ls -l 别名 ll</td><td>单列输出</td></tr><tr><td>ls [绝对路径或相对路径]</td><td>列出指定文件夹的目录</td></tr></tbody></table><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mkdir [文件夹名]</td><td>在当前目录下创建文件夹 mkdir a b 同时创建多个文件夹</td></tr><tr><td>mkdir -p a&#x2F;b&#x2F;c</td><td>创建多层目录</td></tr></tbody></table><h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>rmdir a</td><td>删除 文件夹 a</td></tr><tr><td>rmdir -p a&#x2F;b&#x2F;c</td><td>删除多个文件夹</td></tr></tbody></table><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>touch [文件名]</td><td>创建文件</td></tr><tr><td>touch &#x2F;home&#x2F;hello</td><td>指定文件的创建路径 创建文件</td></tr><tr><td>vim hello</td><td>使用 vim 创建文件</td></tr></tbody></table><h2 id="复制文件或目录"><a href="#复制文件或目录" class="headerlink" title="复制文件或目录"></a>复制文件或目录</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>cp a.txt &#x2F;home&#x2F;b</td><td>将<code>a.txt</code>文件复制到 <code>/home/b</code>目录下</td></tr><tr><td>cp hellp.txt &#x2F;home&#x2F;hello2.txt</td><td>将 <code>hellp</code>文件内容复制给 <code>hello2.txt</code></td></tr><tr><td>\cp hellp.txt &#x2F;home&#x2F;hello2.txt</td><td>直接复制没有 [是否覆盖] 信息</td></tr><tr><td>cp -r hello1 &#x2F;home&#x2F;jgckm</td><td>将<code>hello1</code>整个目录 复制到 <code>/home/jgckm</code>目录下</td></tr></tbody></table><h2 id="删除文件或目录"><a href="#删除文件或目录" class="headerlink" title="删除文件或目录"></a>删除文件或目录</h2><ul><li>删除属于高危操作 需要<strong>谨慎操作</strong></li></ul><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>rm [文件或目录名]</td><td>删除文件或目录</td></tr><tr><td>rm -r [目录名]</td><td>强制递归删除目录内的所有内容</td></tr><tr><td>rm -f [目录名]</td><td>强制执行删除操作，而不提示用于确认</td></tr><tr><td>rm -v [目录名]</td><td>显示指令的详细的执行过程</td></tr><tr><td>rm -f .&#x2F;*</td><td>删除当前目录下的所有没见</td></tr></tbody></table><blockquote><h2 id="rm-rf-删库专用命令-👮‍♂️要吃牢饭🍚-谨慎使用"><a href="#rm-rf-删库专用命令-👮‍♂️要吃牢饭🍚-谨慎使用" class="headerlink" title="rm -rf /* 删库专用命令(👮‍♂️要吃牢饭🍚)谨慎使用"></a><strong><code>rm -rf /*</code></strong> 删库专用命令(👮‍♂️要吃牢饭🍚)谨慎使用</h2></blockquote><h2 id="移动文件与文件夹或重命名"><a href="#移动文件与文件夹或重命名" class="headerlink" title="移动文件与文件夹或重命名"></a>移动文件与文件夹或重命名</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mv oldFileName newFileName</td><td>重命名</td></tr><tr><td>mv a.txt &#x2F;home&#x2F;jgckm</td><td>将<code>a.txt</code>移动到<code>/home/jgckm</code>目录下</td></tr><tr><td>mv a.txt &#x2F;home&#x2F;jgckm&#x2F;b.txt</td><td>将<code>a.txt</code>移动到<code>/home/jgckm</code>目录下，并且重命名为<code>b.txt</code></td></tr></tbody></table><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><blockquote><p>针对小文件使用推荐使用<code>cat</code></p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>cat [filename]</td><td>查看文件内容</td></tr><tr><td>cat -n [filename]</td><td>查看文件内容 显示行号(包括空行)</td></tr></tbody></table><h2 id="more-文件内容分屏查看器"><a href="#more-文件内容分屏查看器" class="headerlink" title="more 文件内容分屏查看器"></a>more 文件内容分屏查看器</h2><blockquote><p>more 指令是一个基于 VI 编辑器的文本过滤器，他以全屏幕的方式按分页显示文本文件的内容。more指令中内置了若干快捷键</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>more [filename]</td><td></td></tr></tbody></table><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键(<code>Space</code>)</td><td>向下翻页</td></tr><tr><td><code>Enter</code></td><td>向下翻页(一行)</td></tr><tr><td><code>q</code></td><td>立刻离开 more，不再显示该文件内容</td></tr><tr><td><code>ctrl</code>+<code>f</code></td><td>向下滚动一屏</td></tr><tr><td><code>ctrl</code>+<code>b</code></td><td>向上滚动一屏</td></tr><tr><td><code>=</code></td><td>输出当前行的行号</td></tr><tr><td><code>:f</code></td><td>输出当前文件的名称和行号</td></tr></tbody></table><h2 id="less-分屏显示文件内容"><a href="#less-分屏显示文件内容" class="headerlink" title="less 分屏显示文件内容"></a>less 分屏显示文件内容</h2><blockquote><p>less指令用来当分屏查看文件内容，它的功能与 more 指令类型，但是比 more 指令更加强大，支持各种显示终端，less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据需要加载内容，对于显示大型文件具有高的效率</p></blockquote><table><thead><tr><th>操作</th><th>功能描述</th></tr></thead><tbody><tr><td>空格键(Space)</td><td>向下翻一页</td></tr><tr><td><code>PageDown</code></td><td>向下翻一页</td></tr><tr><td><code>PageUp</code></td><td>向上翻一页</td></tr><tr><td>&#x2F;字符</td><td>向下搜寻 [字符] 的功能 n：向下查找 N：向上查找</td></tr><tr><td>?字符</td><td>向上搜索 [字符] 的功能 n：向上查找 N：向下查找</td></tr><tr><td><code>=</code></td><td>显示行号和大小</td></tr></tbody></table><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><blockquote><p>echo 输出内容到控制台</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>echo hello world</td><td>在控制台 hello world</td></tr><tr><td>echo -e “hello \n world”</td><td>-e：加反斜线转义的字符进行解释</td></tr></tbody></table><h2 id="重定向和-追加"><a href="#重定向和-追加" class="headerlink" title="&gt; 重定向和 &gt;&gt;追加"></a>&gt; 重定向和 &gt;&gt;追加</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ls -l &gt; 文件</td><td>列表内容写入文件中(覆写)</td></tr><tr><td>ls -al &gt;&gt; 文件</td><td>列表内容追加到文件 中的末尾</td></tr><tr><td>cat 文件1 &gt; 文件2</td><td>将文件1的内容覆盖到文件2</td></tr></tbody></table><h2 id="head-显示文件头部内容"><a href="#head-显示文件头部内容" class="headerlink" title="head 显示文件头部内容"></a>head 显示文件头部内容</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>head [文件]</td><td>查看文件头 (10行内容)</td></tr><tr><td>head -n 5 [文件]</td><td>-n 5 ：指定显示5行</td></tr></tbody></table><h2 id="tail-输出文件尾部内容"><a href="#tail-输出文件尾部内容" class="headerlink" title="tail 输出文件尾部内容"></a>tail 输出文件尾部内容</h2><blockquote><p>tail 输出文件尾部内容 默认情况下 tail 只显示 10行内容</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>tail [文件]</td><td>查看文件末尾10行</td></tr><tr><td>tail -n 5 [文件]</td><td>查看文件末尾5行内容</td></tr><tr><td>tail -f [文件]</td><td>实时追踪该文档的所有更新</td></tr></tbody></table><h2 id="ln-软链接"><a href="#ln-软链接" class="headerlink" title="ln 软链接"></a>ln 软链接</h2><blockquote><p>软连接也称为符号链接，类似于 windows 里的快捷方式，有自己的数据块，主要存放链接其他文件的路径</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ln -s [源文件或目录] [链接名称]</td><td>给源文件创建一个软连接</td></tr></tbody></table><ul><li>通过<code>pwd -P</code>来查看真实地址</li></ul><h3 id="经验技巧"><a href="#经验技巧" class="headerlink" title="经验技巧"></a>经验技巧</h3><ul><li><strong>如果使用 rm -rf 软连接名&#x2F; 删除，会把软连接对应的真实目录下的内容删掉</strong></li></ul><h2 id="history-查询历史命令"><a href="#history-查询历史命令" class="headerlink" title="history 查询历史命令"></a>history 查询历史命令</h2><blockquote><p>查看已经执行过的历史命令</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>history</td><td>显示所有历史</td></tr><tr><td>history 10</td><td>显示后10次使用过的命令</td></tr><tr><td>history -c</td><td>清除所有历史</td></tr></tbody></table><h3 id="在终端输入"><a href="#在终端输入" class="headerlink" title="在终端输入"></a>在终端输入</h3><ul><li>可以执行以前执行过的命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!285   # 285为history的行号</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>alias</td><td>查看命令别名</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用基本命令&quot;&gt;&lt;a href=&quot;#常用基本命令&quot; class=&quot;headerlink&quot; title=&quot;常用基本命令&quot;&gt;&lt;/a&gt;常用基本命令&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Shell 可以看做是命令解释器，为我们提供交互式的文本控制台界面。我们可以通过终</summary>
      
    
    
    
    <category term="Linux" scheme="https://jgckm.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://jgckm.github.io/categories/Linux/Shell/"/>
    
    
    <category term="Linux" scheme="https://jgckm.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="https://jgckm.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Centos7修改静态ip</title>
    <link href="https://jgckm.github.io/posts/f6ab952a.html"/>
    <id>https://jgckm.github.io/posts/f6ab952a.html</id>
    <published>2022-08-16T10:34:56.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>来一发linux 修改静态ip的记录</li><li>要配置和电脑主机在同一ip网段下方便链接</li></ul></blockquote><h1 id="⚙打开终端"><a href="#⚙打开终端" class="headerlink" title="⚙打开终端"></a>⚙打开终端</h1><p><code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>进入编辑页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;dhcp&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;03da8ded-3662-437c-97c8-f0194fbc8a9d&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br></pre></td></tr></table></figure><h1 id="🛠修改第4行的配置"><a href="#🛠修改第4行的配置" class="headerlink" title="🛠修改第4行的配置"></a>🛠修改第4行的配置</h1><ul><li><h2 id="修改BOOTPROTO-dhcp"><a href="#修改BOOTPROTO-dhcp" class="headerlink" title="修改BOOTPROTO=&quot;dhcp&quot;"></a>修改<code>BOOTPROTO=&quot;dhcp&quot;</code></h2></li></ul><ol><li>按键盘的 <code>4gg</code> 跳到第四行 <code>ww</code>跳到 dhcp 在按 <code>dw</code>删除 dhcp</li><li>按<code>i</code>进入编辑模式填写 static</li><li>按 <code>Esc</code>退出编辑模式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot;</span><br></pre></td></tr></table></figure><h1 id="🥽-添加IP配置"><a href="#🥽-添加IP配置" class="headerlink" title="🥽 添加IP配置"></a>🥽 添加IP配置</h1><ol><li>复制下面代码</li><li><code>Shift</code>+<code>g</code>快速跳到最后一行</li><li>按<code>o</code>进入编辑模式</li><li><code>Ctrl</code>+<code>Shift</code>+<code>v</code>粘贴代码</li><li>如果要是不同ip可以使用左右可控制键来进行修改</li><li><code>:wq</code>保存并退出</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># IP地址</span><br><span class="line">IPADDR=192.168.131.100</span><br><span class="line"># 网关</span><br><span class="line">GATEWAY=192.168.131.2</span><br><span class="line"># 域名解析器</span><br><span class="line">DNS1=192.168.131.2</span><br></pre></td></tr></table></figure><ul><li><h2 id="🧨配置的网段前面要相同"><a href="#🧨配置的网段前面要相同" class="headerlink" title="🧨配置的网段前面要相同"></a>🧨配置的网段前面要相同</h2></li><li><p>IPADDR 后面的可以最后一个随便写  <code>192.168.131.xxx</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208161909705.png" alt="image-20220816190933516"></p><h1 id="🎉重启服务"><a href="#🎉重启服务" class="headerlink" title="🎉重启服务"></a>🎉重启服务</h1><p>在终端输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart </span><br></pre></td></tr></table></figure><h1 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h1><ol><li><p>物理机能 ping 通虚拟机，但是虚拟机ping不通物理机，一般都是物理机的防火墙问题，把防火墙关闭就行</p></li><li><p>虚拟机能 ping 物理机，但是虚拟机 ping 不通外网，一般都是DNS设置有问题</p></li><li><p>虚拟机 ping <a href="http://www.baidu.com/">www.baidu.com</a> 显示域名未知等信息，一般查看 GATEWAY 和 DNS 设置是否正确(踩坑2小时)</p></li><li><p>如果以上全部设置还是不行，需要关闭 NetworkManager 服务</p><ul><li><p>systemctl stop NetworkManager  关闭</p></li><li><p>systemctl disable NetworkManager  禁用</p></li></ul></li><li><p>如果检查发现 systemctl status network  有问题  需要检查  ifconfig-ens33</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;来一发linux 修改静态ip的记录&lt;/li&gt;
&lt;li&gt;要配置和电脑主机在同一ip网段下方便链接&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;⚙打开终端&quot;&gt;&lt;a href=&quot;#⚙打开终端&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Linux" scheme="https://jgckm.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://jgckm.github.io/tags/Linux/"/>
    
    <category term="CentOS" scheme="https://jgckm.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>vim的基本使用</title>
    <link href="https://jgckm.github.io/posts/b1d1e418.html"/>
    <id>https://jgckm.github.io/posts/b1d1e418.html</id>
    <published>2022-08-16T02:41:42.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h1><blockquote><p>vim 是 linux 系统中自带的编辑器，被称为**<code>编辑器之神</code>** 它的前身是 vi ，历史悠久，熟练的使用vim 有非常非常高效的效率</p></blockquote><p>Vim 有三种模式</p><ul><li>一般模式</li><li>编辑模式(插入模式) </li><li>命令模式</li></ul><h1 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h1><blockquote><p> 用vim直接打开文件，就会自动进入一般模式(默认模式)</p></blockquote><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>yy</td><td>复制当前行</td></tr><tr><td>数字yy</td><td>复制一段(从光标当前行向后n行)</td></tr><tr><td>y$</td><td>从当前光标位置复制到行的最后</td></tr><tr><td>y^</td><td>从当前光标位置复制到行的最前面</td></tr><tr><td>yw</td><td>复制当前单词</td></tr><tr><td>p</td><td>粘贴</td></tr></tbody></table><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>dd</td><td>删除行</td></tr><tr><td>数字dd</td><td>删除n行(向后删除)</td></tr><tr><td>d^</td><td>删除从当前光标位置到行头</td></tr><tr><td>d$</td><td>删除从当前光标位置到行尾</td></tr><tr><td>dw</td><td>删除当前单词</td></tr></tbody></table><h3 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h3><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>x</td><td>剪切当前光标位置的(单个字符)</td></tr><tr><td>X</td><td>剪切光标之前的(单个字符)</td></tr></tbody></table><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>r</td><td>替换当前光标的字符</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>w</td><td>移动到下一个词(单词开头)</td></tr><tr><td>e</td><td>移动到词尾</td></tr><tr><td>gg</td><td>光标移动到整片文档的开头</td></tr><tr><td>数字G</td><td>移动到第n行</td></tr><tr><td>G</td><td>光标移动到整片文档的结尾</td></tr><tr><td>shift+^</td><td>跳到当前光标的行头</td></tr><tr><td>shift+$</td><td>调到当前光标的行尾</td></tr><tr><td>u</td><td>撤销操作</td></tr></tbody></table><h3 id="控制光标位置"><a href="#控制光标位置" class="headerlink" title="控制光标位置"></a>控制光标位置</h3><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>h</td><td>光标向左</td></tr><tr><td>l</td><td>光标向右</td></tr><tr><td>k</td><td>光标向上</td></tr><tr><td>j</td><td>光标向下</td></tr><tr><td>shift+h</td><td>视口的第一行</td></tr><tr><td>shift+l</td><td>视口的的最后一行</td></tr></tbody></table><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><table><thead><tr><th>语法</th><th>功能</th></tr></thead><tbody><tr><td>i</td><td>当前光标前</td></tr><tr><td>a</td><td>当前光标后</td></tr><tr><td>o</td><td>当前光标的下一行</td></tr><tr><td>I</td><td>光标所在行最前面</td></tr><tr><td>A</td><td>光标所在行的最后面</td></tr><tr><td>O</td><td>光标所在行的上一行</td></tr><tr><td>Esc</td><td>退出编辑模式</td></tr></tbody></table><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:q!</td><td>强制退出</td></tr><tr><td>:wq</td><td>保存退出</td></tr><tr><td>&#x2F;</td><td>查找   n向下查找N向上查找</td></tr><tr><td>:s&#x2F;old&#x2F;new</td><td>替换光标所在行的第一个old为new</td></tr><tr><td>:s&#x2F;old&#x2F;new&#x2F;g</td><td>替换光标所在行的所有old为new</td></tr><tr><td>:%s&#x2F;old&#x2F;new</td><td>替换每一行的第一个old为new</td></tr><tr><td>:%s&#x2F;old&#x2F;new&#x2F;g</td><td>替换整篇文档中匹配到的old为new</td></tr><tr><td>:noh</td><td>去除高亮</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>隐藏行号</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">强大的vim编辑器入门</summary>
    
    
    
    <category term="Linux" scheme="https://jgckm.github.io/categories/Linux/"/>
    
    <category term="vim" scheme="https://jgckm.github.io/categories/Linux/vim/"/>
    
    
    <category term="Linux" scheme="https://jgckm.github.io/tags/Linux/"/>
    
    <category term="vim" scheme="https://jgckm.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Typora配置图片自动上传到图床</title>
    <link href="https://jgckm.github.io/posts/5e37b811.html"/>
    <id>https://jgckm.github.io/posts/5e37b811.html</id>
    <published>2022-08-15T03:13:54.000Z</published>
    <updated>2024-04-14T04:54:41.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="✨前言"><a href="#✨前言" class="headerlink" title="✨前言"></a>✨前言</h1><blockquote><p>因为写博客的时候图片需要手动的插入，实在是麻烦，这种繁琐重复的事，很是让人烦。所以就打算作个图床，一开始用<code>gitee</code>对国内友好点，可是他好像不是为人民服务的那种，各种的反链，恶心。最终选择用github+jsdelivr 搭建</p></blockquote><h1 id="🥟使用的工具"><a href="#🥟使用的工具" class="headerlink" title="🥟使用的工具"></a>🥟使用的工具</h1><ul><li><p><a href="https://github.com/Molunerfinn/PicGo"><strong>PicGo</strong></a> 是一款优秀的图床上传工具 可以快速上传图片到图床的工具</p></li><li><p><a href="https://typoraio.cn/"><strong>Typora</strong></a> markdown编辑器</p></li><li><p>github 用于存储图片</p></li><li><p>github-plus PicGo 里面的插件 可以删除图片和同步仓库，而自带的版本不能删除</p></li></ul><blockquote><p>这边使用<code>PicGo+github</code>来实现markdown图床 </p></blockquote><h1 id="🍭下载"><a href="#🍭下载" class="headerlink" title="🍭下载"></a>🍭下载</h1><p>进入<code>PicGo</code> 的github<a href="https://github.com/Molunerfinn/PicGo/releases">下载页面</a></p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://s1.ax1x.com/2022/08/15/va5fj1.png" alt="下载 PicGO"></p><p>这里根据自己系统选择，我是win版。下载后无脑安装</p><p>成功安装界面</p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://s1.ax1x.com/2022/08/15/vaIfPg.png" alt="界面"></p><h1 id="🍿创建github仓库"><a href="#🍿创建github仓库" class="headerlink" title="🍿创建github仓库"></a>🍿创建github仓库</h1><p>然后初始化仓库（省略）</p><h1 id="🌭配置PicGo"><a href="#🌭配置PicGo" class="headerlink" title="🌭配置PicGo"></a>🌭配置PicGo</h1><p>在<strong>PicGo</strong>找到 <strong>图床设置</strong> 找到 github图床</p><h2 id="token创建"><a href="#token创建" class="headerlink" title="token创建"></a>token创建</h2><ol><li><p>点击<code>setting</code><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208151605800.png" alt="setting"></p></li><li><p>进入设置界面看做下脚<img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208151607476.png"></p></li><li><p>下面就是点击<code>Personal access tokens</code> &#x3D;&gt; <code>Generate new token</code> 生成<code>token</code>并且复制</p></li><li><p>基本配置如下<img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208151613288.png" alt="image-20220815161331183"></p><h2 id="重点说一下"><a href="#重点说一下" class="headerlink" title="重点说一下"></a>重点说一下</h2><p>推荐：使用<strong>github-plus</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208160813762.png" alt="github-plus"></p><p>配置基本一样<img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208160815270.png" alt="github-plus配置"></p><blockquote><p>设定仓库名：要设置你自己的仓库   格式： 用户名&#x2F;仓库名</p></blockquote><p>用 <code>jsdelivr</code> CDN加速 速度不用说了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/jgckM/image@main</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名/仓库文件路径</span><br></pre></td></tr></table></figure></li></ol><p>设置完了点击 <strong>确定</strong>  和 <strong>设为默认图床</strong></p><p>配置重命名(防止图片重名)<img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208151638323.png" alt="设置重命名图片"></p><h1 id="🍔Typora-配置"><a href="#🍔Typora-配置" class="headerlink" title="🍔Typora 配置"></a>🍔Typora 配置</h1><p><img src="https://cdn.jsdelivr.net/gh/jgckM/image@main/loading/202208161808156.gif" data-original="https://cdn.jsdelivr.net/gh/jgckM/image@main/image/202208151639825.png" alt="配置Tyora上传"></p><h3 id="✅好了这样就大功告成了，以后图片粘贴进-Typora-就会自动上传，不需要在手动上传了，速度还是不错的"><a href="#✅好了这样就大功告成了，以后图片粘贴进-Typora-就会自动上传，不需要在手动上传了，速度还是不错的" class="headerlink" title="✅好了这样就大功告成了，以后图片粘贴进 Typora 就会自动上传，不需要在手动上传了，速度还是不错的"></a>✅好了这样就大功告成了，以后图片粘贴进 Typora 就会自动上传，不需要在手动上传了，速度还是不错的</h3>]]></content>
    
    
    <summary type="html">写博客必备的图床，自己手动搭建一个github+jsdelivr</summary>
    
    
    
    <category term="Blog" scheme="https://jgckm.github.io/categories/Blog/"/>
    
    
    <category term="Blog" scheme="https://jgckm.github.io/tags/Blog/"/>
    
    <category term="图床" scheme="https://jgckm.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
</feed>
